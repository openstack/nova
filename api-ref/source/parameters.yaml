# variables in header
image_location:
  description: |
    The image location URL of the image or backup created, HTTP header
    "Location: <image location URL>" will be returned.

    .. note:: The URL returned may not be accessible to users and should not
      be relied upon. Use microversion 2.45 or simply parse the image ID out
      of the URL in the Location response header.
  in: header
  required: true
  type: string
  max_version: 2.44
server_location:
  description: |
    The location URL of the server, HTTP header
    "Location: <server location URL>" will be returned.
  in: header
  required: true
  type: string
tag_location:
  description: |
    The location of the tag. It's individual tag URL which can be used for
    checking the existence of the tag on the server or deleting the tag from the server.
  in: header
  required: true
  type: string
x-compute-request-id_resp:
  description: |
    The local request ID, which is a unique ID generated automatically
    for tracking each request to nova.
    It is associated with the request and appears in the log lines
    for that request.
    By default, the middleware configuration
    ensures that the local request ID appears in the log files.

    .. note::

       This header exists for backward compatibility.
  in: header
  required: true
  type: string
x-openstack-request-id_req:
  description: |
    The global request ID, which is a unique common ID
    for tracking each request in OpenStack components.
    The format of the global request ID must be ``req-`` + UUID (UUID4).
    If not in accordance with the format, it is ignored.
    It is associated with the request and appears in the log lines
    for that request.
    By default, the middleware configuration ensures that
    the global request ID appears in the log files.
  in: header
  required: false
  type: string
  min_version: 2.46
x-openstack-request-id_resp:
  description: |
    The local request ID, which is a unique ID generated automatically
    for tracking each request to nova.
    It is associated with the request and appears in the log lines
    for that request.
    By default, the middleware configuration
    ensures that the local request ID appears in the log files.
  in: header
  required: true
  type: string
  min_version: 2.46

# variables in path
agent_build_id:
  description: |
    The id of the agent build.
  in: path
  required: true
  type: string
aggregate_id:
  description: |
    The aggregate ID.
  in: path
  required: true
  type: integer
api_version:
  in: path
  required: true
  type: string
  description: >
    The API version as returned in the links from the ``GET /`` call.
before_timestamp:
  description: |
    Filters the response by the date and time before which to list usage
    audits.
    The date and time stamp format is as follows:

    ::

      CCYY-MM-DD hh:mm:ss.NNNNNN

    For example, ``2015-08-27 09:49:58`` or ``2015-08-27 09:49:58.123456``.
  in: path
  required: true
  type: string
cell_id:
  description: |
    The UUID of the cell.
  in: path
  required: true
  type: string
console_id:
  description: |
    The UUID of the console.
  in: path
  required: true
  type: string
console_token:
  description: |
    Console authentication token.
  in: path
  required: true
  type: string
# Used in the request path for PUT /os-services/disable-log-reason before
# microversion 2.53.
disabled_reason:
  description: |
    The reason for disabling a service.
  in: path
  required: false
  type: string
domain:
  description: |
    The registered DNS domain that the DNS drivers publish.
  in: path
  required: true
  type: string
fixed_ip_path:
  description: |
    The fixed IP of interest to you.
  in: path
  required: true
  type: string
flavor_extra_spec_key:
  description: |
    The extra spec key for the flavor.
  in: path
  required: true
  type: string
flavor_id:
  description: |
    The ID of the flavor.
  in: path
  required: true
  type: string
floating_ip_id:
  description: |
    The ID of the floating IP address.
  in: path
  required: true
  type: string
host_name:
  description: |
    The name of the host.
  in: path
  required: true
  type: string
hypervisor_hostname_pattern:
  description: |
    The hypervisor host name or a portion of it.
    The hypervisor hosts are selected with the host name matching this pattern.
  in: path
  required: true
  type: string
hypervisor_id:
  description: |
    The ID of the hypervisor.
  in: path
  required: true
  type: integer
  max_version: 2.52
hypervisor_id_uuid:
  description: |
    The ID of the hypervisor as a UUID.
  in: path
  required: true
  type: string
  min_version: 2.53
image_id:
  description: |
    The UUID of the image.
  in: path
  required: true
  type: string
instance_id:
  description: |
    The UUID of the instance.
  in: path
  required: true
  type: string
ip:
  description: |
    The IP address.
  in: path
  required: true
  type: string
key:
  description: |
    The metadata item key, as a string. Maximum length is 255 characters.
  in: path
  required: true
  type: string
keypair_name_path:
  description: |
    The keypair name.
  in: path
  required: true
  type: string
migration_id_path:
  description: |
    The ID of the server migration.
  in: path
  required: true
  type: integer
network_id:
  description: |
    The UUID of the network.
  in: path
  required: true
  type: string
network_label:
  description: |
    The network label, such as ``public`` or ``private``.
  in: path
  required: true
  type: string
node_id:
  description: |
    The node ID.
  in: path
  required: true
  type: string
port_id_path:
  description: |
    The UUID of the port.
  in: path
  required: true
  type: string
quota_class_id: &quota_class_id
  description: |
    The ID of the quota class.
    Nova supports the ``default`` Quota Class only.
  in: path
  required: true
  type: string
request_id:
  description: |
    The ID of the request.
  in: path
  required: true
  type: string
security_group_default_rule_id:
  description: |
    The UUID of the security group rule.
  in: path
  required: true
  type: string
security_group_id:
  description: |
    The ID of the security group.
  in: path
  required: true
  type: string
security_group_rule_id:
  description: |
    The ID of the security group rule.
  in: path
  required: true
  type: string
server_group_id:
  description: |
    The UUID of the server group.
  in: path
  required: true
  type: string
server_id_path:
  description: |
    The UUID of the server.
  in: path
  required: true
  type: string
service_id_path_2_52:
  description: |
    The id of the service.

    .. note:: This may not uniquely identify a service in a multi-cell
              deployment.
  in: path
  required: true
  type: integer
  max_version: 2.52
service_id_path_2_53:
  description: |
    The id of the service as a uuid. This uniquely identifies the service in a
    multi-cell deployment.
  in: path
  required: true
  type: string
  min_version: 2.53
service_id_path_2_53_no_version:
  description: |
    The id of the service as a uuid. This uniquely identifies the service in a
    multi-cell deployment.
  in: path
  required: true
  type: string
share_id_path:
  description: |
    The UUID of the attached share.
  in: path
  required: true
  type: string
snapshot_id_path:
  description: |
    The UUID of the snapshot.
  in: path
  required: true
  type: string
tag:
  description: |
    The tag as a string.
  in: path
  required: true
  type: string
tenant_id:
  description: |
    The UUID of the tenant in a multi-tenancy cloud.
  in: path
  required: true
  type: string
volume_id_attached_path:
  description: |
    The UUID of the attached volume.
  in: path
  required: true
  type: string
volume_id_path:
  description: |
    The unique ID for a volume.
  in: path
  required: true
  type: string
volume_id_swap_src:
  description: |
    The UUID of the volume being replaced.
  in: path
  required: true
  type: string
volume_id_to_detach_path:
  description: |
    The UUID of the volume to detach.
  in: path
  required: true
  type: string

# variables in query
access_ip_v4_query_server:
  in: query
  required: false
  type: string
  description: |
    Filter server list result by IPv4 address that should be used
    to access the server.
access_ip_v6_query_server:
  in: query
  required: false
  type: string
  description: |
    Filter server list result by IPv6 address that should be used
    to access the server.
all_projects:
  description: |
    Administrator only. Lists server groups for all projects. For example:

      ``GET /os-server-groups?all_projects=True``

    If you specify a tenant ID for a non-administrative user with this query parameter,
    the call lists all server groups for the tenant, or project, rather than for
    all projects.
    Value of this query parameter is not checked, only presence is considered
    as request for all projects.
  in: query
  required: false
  type: string
all_tenants:
  description: |
    Specify the ``all_tenants`` query parameter to ping instances
    for all tenants. By default this is only allowed by admin users.
    Value of this query parameter is not checked, only presence
    is considered as request for all tenants.
  in: query
  required: false
  type: string
all_tenants_query:
  description: |
    Specify the ``all_tenants`` query parameter to list all instances
    for all projects. By default this is only allowed by administrators.
    If this parameter is specified without a value, the value defaults to
    ``True``. If the value is specified, ``1``, ``t``, ``true``,
    ``on``, ``y`` and ``yes`` are treated as ``True``. ``0``, ``f``,
    ``false``, ``off``, ``n`` and ``no`` are treated as ``False``.
    (They are case-insensitive.)
  in: query
  required: false
  type: boolean
all_tenants_sec_grp_query:
  description: |
    Specify the ``all_tenants`` query parameter to list all security
    groups for all projects. This is only allowed for admin users.
    Value of this query parameter is not checked, only presence
    is considered as request for all tenants.
  in: query
  required: false
  type: string
availability_zone_query_server:
  description: |
    Filter the server list result by server availability zone.

    This parameter is restricted to administrators until microversion 2.83.
    If non-admin users specify this parameter on a microversion less than 2.83,
    it will be ignored.
  in: query
  required: false
  type: string
binary_query:
  description: |
    Filter the service list result by binary name of the service.
  in: query
  required: false
  type: string
changes-since:
  description: |
    Filters the response by a date and time when the image last changed status.
    Use this query parameter to check for changes since a previous request rather
    than re-downloading and re-parsing the full status at each polling interval.
    If data has changed, the call returns only the items changed since the ``changes-since``
    time. If data has not changed since the ``changes-since`` time, the call returns an
    empty list.
    To enable you to keep track of changes, this filter also displays images
    that were deleted if the ``changes-since`` value specifies a date in the last 30 days.
    Items deleted more than 30 days ago might be returned, but it is not guaranteed.
    The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:

    ::

       CCYY-MM-DDThh:mm:ss±hh:mm

    The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC.
    For example, ``2015-08-27T09:49:58-05:00``.
    If you omit the time zone, the UTC time zone is assumed.
  in: query
  required: false
  type: string
changes_before_instance_action:
  description: |
    Filters the response by a date and time stamp when the instance actions last changed.
    Those instances that changed before or equal to the specified date and time stamp
    are returned.

    The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:
    ::

       CCYY-MM-DDThh:mm:ss±hh:mm

    The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC.
    For example, ``2015-08-27T09:49:58-05:00``.
    If you omit the time zone, the UTC time zone is assumed.
    When both ``changes-since`` and ``changes-before`` are specified,
    the value of the ``changes-before`` must be later than or equal to
    the value of the ``changes-since`` otherwise API will return 400.
  in: query
  required: false
  type: string
  min_version: 2.66
changes_before_migration:
  description: |
    Filters the response by a date and time stamp when the migration last
    changed. Those migrations that changed before or equal to the specified date and time
    stamp are returned.

    The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:
    ::

       CCYY-MM-DDThh:mm:ss±hh:mm

    The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC.
    For example, ``2015-08-27T09:49:58-05:00``.
    If you omit the time zone, the UTC time zone is assumed.
    When both ``changes-since`` and ``changes-before`` are specified,
    the value of the ``changes-before`` must be later than or equal to
    the value of the ``changes-since`` otherwise API will return 400.
  in: query
  required: false
  type: string
  min_version: 2.66
changes_before_server:
  description: |
    Filters the response by a date and time stamp when the server last changed.
    Those servers that changed before or equal to the specified date and time stamp
    are returned. To help keep track of changes this may also return recently deleted
    servers.

    The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:
    ::

       CCYY-MM-DDThh:mm:ss±hh:mm

    The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC.
    For example, ``2015-08-27T09:49:58-05:00``.
    If you omit the time zone, the UTC time zone is assumed.
    When both ``changes-since`` and ``changes-before`` are specified,
    the value of the ``changes-before`` must be later than or equal to
    the value of the ``changes-since`` otherwise API will return 400.
  in: query
  required: false
  type: string
  min_version: 2.66
changes_since_instance_action:
  description: |
    Filters the response by a date and time stamp when the instance action last
    changed.

    The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:
    ::

       CCYY-MM-DDThh:mm:ss±hh:mm

    The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC.
    For example, ``2015-08-27T09:49:58-05:00``.
    If you omit the time zone, the UTC time zone is assumed.
    When both ``changes-since`` and ``changes-before`` are specified,
    the value of the ``changes-since`` must be earlier than or equal to
    the value of the ``changes-before`` otherwise API will return 400.
  in: query
  required: false
  type: string
  min_version: 2.58
changes_since_migration:
  description: |
    Filters the response by a date and time stamp when the migration last
    changed. Those changed after the specified date and time stamp are returned.

    The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:
    ::

       CCYY-MM-DDThh:mm:ss±hh:mm

    The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC.
    For example, ``2015-08-27T09:49:58-05:00``.
    If you omit the time zone, the UTC time zone is assumed.
    When both ``changes-since`` and ``changes-before`` are specified,
    the value of the ``changes-since`` must be earlier than or equal to
    the value of the ``changes-before`` otherwise API will return 400.
  in: query
  required: false
  type: string
  min_version: 2.59
changes_since_server:
  description: |
    Filters the response by a date and time stamp when the server last
    changed status. To help keep track of changes this may also return
    recently deleted servers.

    The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:
    ::

       CCYY-MM-DDThh:mm:ss±hh:mm

    The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC.
    For example, ``2015-08-27T09:49:58-05:00``.
    If you omit the time zone, the UTC time zone is assumed.
    When both ``changes-since`` and ``changes-before`` are specified,
    the value of the ``changes-since`` must be earlier than or equal to
    the value of the ``changes-before`` otherwise API will return 400.
  in: query
  required: false
  type: string
config_drive_query_server:
  description: |
    Filter the server list result by the config drive setting of the server.

    This parameter is restricted to administrators until microversion 2.83.
    If non-admin users specify this parameter on a microversion less than 2.83,
    it will be ignored.
  in: query
  required: false
  type: string
created_at_query_server:
  description: |
    Filter the server list result by a date and time stamp when server was created.

    The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:
    ::

       CCYY-MM-DDThh:mm:ss±hh:mm

    The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC.
    For example, ``2015-08-27T09:49:58-05:00``.
    If you omit the time zone, the UTC time zone is assumed.

    This parameter is restricted to administrators until microversion 2.83.
    If non-admin users specify this parameter on a microversion less than 2.83,
    it will be ignored.
  in: query
  required: false
  type: string
delete_info:
  description: |
    Information for snapshot deletion. Include the ID of the associated volume. For
    example:

    .. code-block:: javascript

       DELETE /os-assisted-volume-snapshots/421752a6-acf6-4b2d-bc7a-119f9148cd8c?delete_info='{"volume_id": "521752a6-acf6-4b2d-bc7a-119f9148cd8c"}'
  in: query
  required: true
  type: string
deleted_query:
  in: query
  required: false
  type: boolean
  description: |
    Show deleted items only. In some circumstances deleted items will still
    be accessible via the backend database, however there is no
    contract on how long, so this parameter should be used with
    caution. ``1``, ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as
    ``True`` (case-insensitive). Other than them are treated as ``False``.

    This parameter is only valid when specified by administrators.
    If non-admin users specify this parameter, it is ignored.
description_query_server:
  description: |
    Filter the server list result by description.

    This parameter is only valid when specified by administrators.
    If non-admin users specify this parameter, it is ignored.

    .. note::

       ``display_description`` can also be requested which is alias of
       ``description`` but that is not recommended to use as that will
       be removed in future.
  in: query
  required: false
  type: string
detailed_simple_tenant_usage:
  description: |
    Specify the ``detailed=1`` query parameter to get detail information
    ('server_usages' information).
  in: query
  required: false
  type: integer
disk_config_query_server:
  description: |
    Filter the server list result by the ``disk_config`` setting of the server,
    Valid values are:

    - ``AUTO``
    - ``MANUAL``

    This parameter is only valid when specified by administrators.
    If non-admin users specify this parameter, it is ignored.
  in: query
  required: false
  type: string
end_simple_tenant_usage:
  description: |
    The ending time to calculate usage statistics on compute and
    storage resources. The date and time stamp format is any of
    the following ones:

    ::

       CCYY-MM-DDThh:mm:ss

    For example, ``2015-08-27T09:49:58``.

    ::

       CCYY-MM-DDThh:mm:ss.NNNNNN

    For example, ``2015-08-27T09:49:58.123456``.

    ::

       CCYY-MM-DD hh:mm:ss.NNNNNN

    For example, ``2015-08-27 09:49:58.123456``.
    If you omit this parameter, the current time is used.
  in: query
  required: false
  type: string
exclude:
  description: |
    Specify ``exclude=uuid[,uuid...]`` to exclude the instances from the results.
  in: query
  required: false
  type: string
flavor_is_public_query:
  in: query
  required: false
  type: string
  description: |
    This parameter is only applicable to users with the administrative role.
    For all other non-admin users, the parameter is ignored and only public
    flavors will be returned. Filters the flavor list based on whether the
    flavor is public or private. If the value of this parameter is not
    specified, it is treated as ``True``. If the value is specified, ``1``,
    ``t``, ``true``, ``on``, ``y`` and ``yes`` are treated as ``True``. ``0``,
    ``f``, ``false``, ``off``, ``n`` and ``no`` are treated as ``False``
    (they are case-insensitive). If the value is ``None`` (case-insensitive)
    both public and private flavors will be listed in a single request.
flavor_query:
  description: |
    Filters the response by a flavor, as a UUID. A flavor is a combination of memory,
    disk size, and CPUs.
  in: query
  required: false
  type: string
host_query_server:
  description: |
    Filter the server list result by the host name of compute node.

    This parameter is only valid when specified by administrators.
    If non-admin users specify this parameter, it is ignored.
  in: query
  required: false
  type: string
host_query_service:
  description: |
    Filter the service list result by the host name.
  in: query
  required: false
  type: string
hostname_query_server:
  description: |
    Filter the server list result by the host name of server.

    This parameter is only valid when specified by administrators until
    microversion 2.90, after which it can be specified by all users.
    If non-admin users specify this parameter before microversion 2.90, it is
    ignored.
  in: query
  required: false
  type: string
hypervisor_hostname_pattern_query:
  description: |
    The hypervisor host name or a portion of it. The hypervisor hosts are
    selected with the host name matching this pattern.

    .. note:: ``limit`` and ``marker`` query parameters for paging are
      not supported when listing hypervisors using a hostname pattern.
      Also, ``links`` will not be returned in the response when using this
      query parameter.
  in: query
  required: false
  type: string
  min_version: 2.53
hypervisor_limit:
  description: |
    Requests a page size of items. Returns a number of items up to a limit value.
    Use the ``limit`` parameter to make an initial limited request and use the ID
    of the last-seen item from the response as the ``marker`` parameter value in a
    subsequent limited request.
  in: query
  required: false
  type: integer
  min_version: 2.33
hypervisor_marker:
  description: |
    The ID of the last-seen item. Use the ``limit`` parameter to make an initial limited
    request and use the ID of the last-seen item from the response as the ``marker``
    parameter value in a subsequent limited request.
  in: query
  required: false
  type: integer
  min_version: 2.33
  max_version: 2.52
hypervisor_marker_uuid:
  description: |
    The ID of the last-seen item as a UUID. Use the ``limit`` parameter to make
    an initial limited request and use the ID of the last-seen item from the
    response as the ``marker`` parameter value in a subsequent limited request.
  in: query
  required: false
  type: string
  min_version: 2.53
hypervisor_query:
  description: |
    Filters the response by a hypervisor type.
  in: query
  required: false
  type: string
hypervisor_with_servers_query:
  description: |
    Include all servers which belong to each hypervisor in the response output.
  in: query
  required: false
  type: boolean
  min_version: 2.53
image_name_query:
  description: |
    Filters the response by an image name, as a string.
  in: query
  required: false
  type: string
image_query:
  description: |
    Filters the response by an image, as a UUID.

    .. note::

       'image_ref' can also be requested which is alias of 'image'
       but that is not recommended to use as that will be removed in future.
  in: query
  required: false
  type: string
image_server_query:
  description: |
    Filters the response by a server, as a URL.
  format: uri
  in: query
  required: false
  type: string
image_status_query:
  description: |
    Filters the response by an image status, as a string. For example, ``ACTIVE``.
  in: query
  required: false
  type: string
image_type_query:
  description: |
    Filters the response by an image type. For example, ``snapshot`` or ``backup``.
  in: query
  required: false
  type: string
include:
  description: |
    Specify ``include=uuid[,uuid...]`` to include the instances in the results.
  in: query
  required: false
  type: string
instance_action_limit:
  description: |
    Requests a page size of items. Returns a number of items up to a limit value.
    Use the ``limit`` parameter to make an initial limited request and use the
    last-seen item from the response as the ``marker`` parameter value in a
    subsequent limited request.
  in: query
  required: false
  type: integer
  min_version: 2.58
instance_action_marker:
  description: |
    The ``request_id`` of the last-seen instance action. Use the ``limit``
    parameter to make an initial limited request and use the last-seen
    item from the response as the ``marker`` parameter value in a subsequent
    limited request.
  in: query
  required: false
  type: string
  min_version: 2.58
ip6_query:
  description: |
    An IPv6 address to filter results by.

    Up to microversion 2.4, this parameter is only valid when specified
    by administrators. If non-admin users specify this parameter,
    it is ignored.
    Starting from microversion 2.5, this parameter is valid for no-admin users
    as well as administrators.
  in: query
  required: false
  type: string
ip_query:
  description: |
    An IPv4 address to filter results by.
  in: query
  required: false
  type: string
kernel_id_query_server:
  in: query
  required: false
  type: string
  description: |
    Filter the server list result by the UUID of the kernel image
    when using an AMI.

    This parameter is only valid when specified by administrators.
    If non-admin users specify this parameter, it is ignored.
key_name_query_server:
  description: |
    Filter the server list result by keypair name.

    This parameter is restricted to administrators until microversion 2.83.
    If non-admin users specify this parameter on a microversion less than 2.83,
    it will be ignored.
  in: query
  required: false
  type: string
keypair_limit:
  description: |
    Requests a page size of items. Returns a number of items up to a limit value.
    Use the ``limit`` parameter to make an initial limited request and use the
    last-seen item from the response as the ``marker`` parameter value in a
    subsequent limited request.
  in: query
  required: false
  type: integer
  min_version: 2.35
keypair_marker:
  description: |
    The last-seen item. Use the ``limit`` parameter to make an initial limited
    request and use the last-seen item from the response as the ``marker``
    parameter value in a subsequent limited request.
  in: query
  required: false
  type: string
  min_version: 2.35
keypair_user:
  in: query
  required: false
  type: string
  description: |
    This allows administrative users to operate key-pairs of specified
    user ID.
  min_version: 2.10
launch_index_query_server:
  description: |
    Filter the server list result by the sequence in which the
    servers were launched.

    This parameter is only valid when specified by administrators.
    If non-admin users specify this parameter, it is ignored.
  in: query
  required: false
  type: integer
launched_at_query_server:
  description: |
    Filter the server list result by a date and time stamp when the instance was launched.
    The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:
    ::

       CCYY-MM-DDThh:mm:ss±hh:mm

    The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC.
    For example, ``2015-08-27T09:49:58-05:00``.
    If you omit the time zone, the UTC time zone is assumed.

    This parameter is restricted to administrators until microversion 2.83.
    If non-admin users specify this parameter on a microversion less than 2.83,
    it will be ignored.
  in: query
  required: false
  type: string
limit:
  description: |
    Requests a page size of items. Returns a number of items up to a limit value.
    Use the ``limit`` parameter to make an initial limited request and use the ID
    of the last-seen item from the response as the ``marker`` parameter value in a
    subsequent limited request.
  in: query
  required: false
  type: integer
limit_simple:
  description: |
    Used in conjunction with ``offset`` to return a slice of items. ``limit``
    is the maximum number of items to return. If ``limit`` is not specified,
    or exceeds the configurable ``max_limit``, then ``max_limit`` will be
    used instead.
  in: query
  required: false
  type: integer
locked_by_query_server:
  description: |
    Filter the server list result by who locked the server, possible value
    could be ``admin`` or ``owner``.

    This parameter is only valid when specified by administrators.
    If non-admin users specify this parameter, it is ignored.
  in: query
  required: false
  type: string
locked_query_server:
  description: |
    Specify the ``locked`` query parameter to list all locked or unlocked
    instances. If the value is specified, ``1``, ``t``, ``true``,
    ``on``, ``y`` and ``yes`` are treated as ``True``. ``0``, ``f``,
    ``false``, ``off``, ``n`` and ``no`` are treated as ``False``.
    (They are case-insensitive.) Any other value provided will be considered
    invalid.
  in: query
  required: false
  type: boolean
  min_version: 2.73
marker:
  description: |
    The ID of the last-seen item. Use the ``limit`` parameter to make an initial limited
    request and use the ID of the last-seen item from the response as the ``marker``
    parameter value in a subsequent limited request.
  in: query
  required: false
  type: string
migration_hidden:
  description: |
    The 'hidden' setting of migration to filter.
    The 'hidden' flag is set if the value is 1.
    The 'hidden' flag is not set if the value is 0.
    But the 'hidden' setting of migration is always 0,
    so this parameter is useless to filter migrations.
  in: query
  required: false
  type: integer
migration_host:
  description: |
    The source/destination compute node of migration to filter.
  in: query
  required: false
  type: string
migration_instance_uuid:
  description: |
    The uuid of the instance that migration is operated on to filter.
  in: query
  required: false
  type: string
migration_limit:
  description: |
    Requests a page size of items. Returns a number of items up to a limit value.
    Use the ``limit`` parameter to make an initial limited request and use the
    last-seen item from the response as the ``marker`` parameter value in a
    subsequent limited request.
  in: query
  required: false
  type: integer
  min_version: 2.59
migration_marker:
  description: |
    The UUID of the last-seen migration. Use the ``limit`` parameter to make an
    initial limited request and use the last-seen item from the response as
    the ``marker`` parameter value in a subsequent limited request.
  in: query
  required: false
  type: string
  min_version: 2.59
migration_source_compute:
  description: |
    The source compute node of migration to filter.
  in: query
  required: false
  type: string
migration_status:
  description: |
    The status of migration to filter.
  in: query
  required: false
  type: string
migration_type:
  description: |
    The type of migration to filter. Valid values are:

    * ``evacuation``
    * ``live-migration``
    * ``migration``
    * ``resize``
  in: query
  required: false
  type: string
minDisk:
  description: |
    Filters the response by a minimum disk space, in GiB. For example, ``100``.
  in: query
  required: false
  type: integer
minRam:
  description: |
    Filters the response by a minimum RAM, in MiB. For example, ``512``.
  in: query
  required: false
  type: integer
node_query_server:
  description: |
    Filter the server list result by the node.

    This parameter is only valid when specified by administrators.
    If non-admin users specify this parameter, it is ignored.
  in: query
  required: false
  type: string
not_tags_any_query:
  in: query
  required: false
  type: string
  description: |
    A list of tags to filter the server list by. Servers that don't
    match any tags in this list will be returned. Boolean expression in this
    case is 'NOT (t1 OR t2)'. Tags in query must be separated by comma.
  min_version: 2.26
not_tags_query:
  in: query
  required: false
  type: string
  description: |
    A list of tags to filter the server list by. Servers that don't
    match all tags in this list will be returned. Boolean expression in this
    case is 'NOT (t1 AND t2)'. Tags in query must be separated by comma.
  min_version: 2.26
offset_simple:
  description: |
    Used in conjunction with ``limit`` to return a slice of items. ``offset``
    is where to start in the list.
  in: query
  required: false
  type: integer
power_state_query_server:
  in: query
  required: false
  type: integer
  description: |
    Filter the server list result by server power state.

    Possible values are integer values that is mapped as::

      0: NOSTATE
      1: RUNNING
      3: PAUSED
      4: SHUTDOWN
      6: CRASHED
      7: SUSPENDED

    This parameter is restricted to administrators until microversion 2.83.
    If non-admin users specify this parameter on a microversion less than 2.83,
    it will be ignored.
progress_query_server:
  description: |
    Filter the server list result by the progress of the server.
    The value could be from 0 to 100 as integer.

    This parameter is restricted to administrators until microversion 2.83.
    If non-admin users specify this parameter on a microversion less than 2.83,
    it will be ignored.
  in: query
  required: false
  type: integer
project_id_query_migrations:
  description: |
    Filter the migrations by the given project ID.
  in: query
  required: false
  type: string
  min_version: 2.80
project_id_query_server:
  description: |
    Filter the list of servers by the given project ID.

    This filter only works when the ``all_tenants`` filter is also specified.

    .. note::

       'tenant_id' can also be requested which is alias of 'project_id'
       but that is not recommended to use as that will be removed in future.
  in: query
  required: false
  type: string
ramdisk_id_query_server:
  in: query
  required: false
  type: string
  description: |
    Filter the server list result by the UUID of the ramdisk image when
    using an AMI.

    This parameter is only valid when specified by administrators.
    If non-admin users specify this parameter, it is ignored.
reservation_id_query:
  in: query
  required: false
  type: string
  description: |
    A reservation id as returned by a servers multiple create call.
reserved_query:
  description: |
    Specify whether the result of resource total includes reserved resources
    or not.

      - ``0``: Not include reserved resources.
      - Other than 0: Include reserved resources.

    If non integer value is specified, it is the same as ``0``.
  in: query
  required: false
  type: integer
server_name_query:
  description: |
    Filters the response by a server name, as a string.  You can use regular expressions
    in the query. For example, the ``?name=bob`` regular expression returns both bob
    and bobb. If you must match on only bob, you can use a regular expression that
    matches the syntax of the underlying database server that is implemented for Compute,
    such as MySQL or PostgreSQL.

    .. note::

       'display_name' can also be requested which is alias of 'name'
       but that is not recommended to use as that will be removed in future.
  format: regexp
  in: query
  required: false
  type: string
server_root_device_name_query:
  in: query
  required: false
  type: string
  description: |
    Filter the server list result by the root device name of the server.

    This parameter is only valid when specified by administrators.
    If non-admin users specify this parameter, it is ignored.
server_status_query:
  description: |
    Filters the response by a server status, as a string. For example, ``ACTIVE``.

    Up to microversion 2.37, an empty list is returned if an invalid status is
    specified. Starting from microversion 2.38, a 400 error is returned
    in that case.
  in: query
  required: false
  type: string
server_uuid_query:
  description: |
    Filter the server list result by the UUID of the server.

    This parameter is only valid when specified by administrators.
    If non-admin users specify this parameter, it is ignored.
  in: query
  required: false
  type: string
soft_deleted_server:
  description: |
    Filter the server list by ``SOFT_DELETED`` status. This parameter is only valid
    when the ``deleted=True`` filter parameter is specified.
  in: query
  required: false
  type: boolean
sort_dir_flavor:
  description: |
    Sort direction. A valid value is ``asc`` (ascending) or ``desc`` (descending).
    Default is ``asc``. You can specify multiple pairs of sort key and sort direction
    query parameters. If you omit the sort direction in a pair, the API uses the natural
    sorting direction of the flavor ``sort_key`` attribute.
  in: query
  required: false
  type: string
sort_dir_server:
  description: |
    Sort direction. A valid value is ``asc`` (ascending) or ``desc`` (descending).
    Default is ``desc``. You can specify multiple pairs of sort key and sort direction
    query parameters. If you omit the sort direction in a pair, the API uses the natural
    sorting direction of the server ``sort_key`` attribute.
  in: query
  required: false
  type: string
sort_key_flavor:
  description: |
    Sorts by a flavor attribute. Default attribute is ``flavorid``. You can specify
    multiple pairs of sort key and sort direction query parameters. If you omit the
    sort direction in a pair, the API uses the natural sorting direction of the flavor
    ``sort_key`` attribute. The sort keys are limited to:

    - ``created_at``
    - ``description``
    - ``disabled``
    - ``ephemeral_gb``
    - ``flavorid``
    - ``id``
    - ``is_public``
    - ``memory_mb``
    - ``name``
    - ``root_gb``
    - ``rxtx_factor``
    - ``swap``
    - ``updated_at``
    - ``vcpu_weight``
    - ``vcpus``
  in: query
  required: false
  type: string
sort_key_server:
  description: |
    Sorts by a server attribute. Default attribute is ``created_at``. You can
    specify multiple pairs of sort key and sort direction query parameters. If
    you omit the sort direction in a pair, the API uses the natural sorting
    direction of the server ``sort_key`` attribute. The sort keys are limited
    to:

    - ``access_ip_v4``
    - ``access_ip_v6``
    - ``auto_disk_config``
    - ``availability_zone``
    - ``config_drive``
    - ``created_at``
    - ``display_description``
    - ``display_name``
    - ``host``
    - ``hostname``
    - ``image_ref``
    - ``instance_type_id``
    - ``kernel_id``
    - ``key_name``
    - ``launch_index``
    - ``launched_at``
    - ``locked`` (New in version 2.73)
    - ``locked_by``
    - ``node``
    - ``power_state``
    - ``progress``
    - ``project_id``
    - ``ramdisk_id``
    - ``root_device_name``
    - ``task_state``
    - ``terminated_at``
    - ``updated_at``
    - ``user_id``
    - ``uuid``
    - ``vm_state``

    ``host`` and ``node`` are only allowed for admin.
    If non-admin users specify them, a 403 error is returned.
  in: query
  required: false
  type: string
start_simple_tenant_usage:
  description: |
    The beginning time to calculate usage statistics on compute and
    storage resources. The date and time stamp format is any of the
    following ones:

    ::

       CCYY-MM-DDThh:mm:ss

    For example, ``2015-08-27T09:49:58``.

    ::

       CCYY-MM-DDThh:mm:ss.NNNNNN

    For example, ``2015-08-27T09:49:58.123456``.

    ::

       CCYY-MM-DD hh:mm:ss.NNNNNN

    For example, ``2015-08-27 09:49:58.123456``.
    If you omit this parameter, the current time is used.
  in: query
  required: false
  type: string
tags_any_query:
  in: query
  required: false
  type: string
  description: |
    A list of tags to filter the server list by. Servers that match
    any tag in this list will be returned. Boolean expression in this
    case is 't1 OR t2'. Tags in query must be separated by comma.
  min_version: 2.26
tags_query:
  in: query
  required: false
  type: string
  description: |
    A list of tags to filter the server list by. Servers that match
    all tags in this list will be returned. Boolean expression in this
    case is 't1 AND t2'. Tags in query must be separated by comma.
  min_version: 2.26
task_state_query_server:
  in: query
  required: false
  type: string
  description: |
    Filter the server list result by task state.

    This parameter is restricted to administrators until microversion 2.83.
    If non-admin users specify this parameter on a microversion less than 2.83,
    it will be ignored.
tenant_id_query:
  description: |
    Specify the project ID (tenant ID) to show the rate and absolute limits.
    This parameter can be specified by admin only.
  in: query
  required: false
  type: string
terminated_at_query_server:
  description: |
    Filter the server list result by a date and time stamp when instance was terminated.
    The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:
    ::

       CCYY-MM-DDThh:mm:ss±hh:mm

    The ``±hh:mm`` value, if included, returns the time zone as an offset from UTC.
    For example, ``2015-08-27T09:49:58-05:00``.
    If you omit the time zone, the UTC time zone is assumed.

    This parameter is restricted to administrators until microversion 2.83.
    If non-admin users specify this parameter on a microversion less than 2.83,
    it will be ignored.
  in: query
  required: false
  type: string
usage_limit:
  description: |
    Requests a page size of items. Calculate usage for the limited number of
    instances. Use the ``limit`` parameter to make an initial limited request
    and use the last-seen instance UUID from the response as the ``marker``
    parameter value in a subsequent limited request.
  in: query
  required: false
  type: integer
  min_version: 2.40
usage_marker:
  description: |
    The last-seen item. Use the ``limit`` parameter to make an initial limited
    request and use the last-seen instance UUID from the response as the
    ``marker`` parameter value in a subsequent limited request.
  in: query
  required: false
  type: string
  min_version: 2.40
user_id_query_migrations:
  description: |
    Filter the migrations by the given user ID.
  in: query
  required: false
  type: string
  min_version: 2.80
user_id_query_quota:
  description: |
    ID of user to list the quotas for.
  in: query
  required: false
  type: string
user_id_query_quota_delete:
  description: |
    ID of user to delete quotas for.
  in: query
  required: false
  type: string
user_id_query_server:
  description: |
    Filter the list of servers by the given user ID.

    This parameter is restricted to administrators until microversion 2.83.
    If non-admin users specify this parameter on a microversion less than 2.83,
    it will be ignored.
  in: query
  required: false
  type: string
user_id_query_set_quota:
  description: |
    ID of user to set the quotas for.
  in: query
  required: false
  type: string
vm_state_query_server:
  description: |
    Filter the server list result by vm state.

    The value could be:

    - ``ACTIVE``
    - ``BUILDING``
    - ``DELETED``
    - ``ERROR``
    - ``PAUSED``
    - ``RESCUED``
    - ``RESIZED``
    - ``SHELVED``
    - ``SHELVED_OFFLOADED``
    - ``SOFT_DELETED``
    - ``STOPPED``
    - ``SUSPENDED``

    This parameter is restricted to administrators until microversion 2.83.
    If non-admin users specify this parameter on a microversion less than 2.83,
    it will be ignored.
  in: query
  required: false
  type: string

# variables in body
accessIPv4:
  in: body
  required: true
  type: string
  description: |
    IPv4 address that should be used to access this server. May be
    automatically set by the provider.
accessIPv4_in:
  in: body
  required: false
  type: string
  description: |
    IPv4 address that should be used to access this server.
accessIPv6:
  in: body
  required: true
  type: string
  description: |
    IPv6 address that should be used to access this server. May be
    automatically set by the provider.
accessIPv6_in:
  in: body
  required: false
  type: string
  description: |
    IPv6 address that should be used to access this server.
action:
  description: |
    The name of the action.
  in: body
  required: true
  type: string
action_reserve:
  description: |
    The attribute to reserve an IP with a value of ``null``.
  in: body
  required: false
  type: string
action_unreserve:
  description: |
    The attribute to release an IP with a value of ``null``.
  in: body
  required: false
  type: string
addFixedIp:
  description: |
    The action to add a fixed ip address to a server.
  in: body
  required: true
  type: object
addFloatingIp:
  description: |
    The action. Contains required floating IP ``address`` and optional
    ``fixed_address``.
  in: body
  required: true
  type: object
address:
  description: |
    The floating IP address.
  in: body
  required: true
  type: string
addresses:
  description: |
    The addresses for the server.  Servers with status ``BUILD`` hide their
    addresses information.
    This view is not updated immediately.
    Please consult with OpenStack Networking API for up-to-date information.
  in: body
  required: true
  type: object
addresses_obj:
  description: |
    The addresses information for the server.
  in: body
  required: true
  type: object
addSecurityGroup:
  description: |
    The action to add a security group to a server.
  in: body
  required: true
  type: object
addTenantAccess:
  description: |
    The action.
  in: body
  required: true
  type: string
adminPass_change_password:
  description: |
    The administrative password for the server.
  in: body
  required: true
  type: string
adminPass_evacuate:
  description: |
    An administrative password to access the evacuated instance.
    If you set ``enable_instance_password`` configuration option to ``False``,
    the API wouldn't return the ``adminPass`` field in response.
  in: body
  required: false
  type: string
  max_version: 2.13
adminPass_evacuate_request:
  description: |
    An administrative password to access the evacuated server.
    If you omit this parameter, the operation generates a new password.
    Up to API version 2.13, if ``onSharedStorage`` is set to ``True`` and
    this parameter is specified, an error is raised.
  in: body
  required: false
  type: string
adminPass_request:
  description: |
    The administrative password of the server. If you omit this parameter, the operation
    generates a new password.
  in: body
  required: false
  type: string
adminPass_rescue_request:
  description: |
    The password for the rescued instance. If you omit this parameter, the operation
    generates a new password.
  in: body
  required: false
  type: string
adminPass_response:
  description: |
    The administrative password for the server. If you set ``enable_instance_password`` configuration
    option to ``False``, the API wouldn't return the ``adminPass`` field in response.
  in: body
  required: false
  type: string
agent:
  description: |
    The guest agent object.
  in: body
  required: true
  type: object
agent_id:
  description: |
    The agent ID.
  in: body
  required: true
  type: integer
agent_id_str:
  description: |
    The agent ID. (This is a bug of API, this should be integer type which is consistent with
    the responses of agent create and list. This will be fixed in later microversion.)
  in: body
  required: true
  type: string
agents:
  description: |
    A list of guest agent objects.
  in: body
  required: true
  type: array
aggregate:
  description: |
    The host aggregate object.
  in: body
  required: true
  type: object
aggregate_add_host:
  description: |
    The add_host object used to add host to aggregate.
  in: body
  required: true
  type: object
aggregate_az:
  description: |
    The availability zone of the host aggregate.
  in: body
  required: true
  type: string
aggregate_az_optional_create:
  description: |
    The availability zone of the host aggregate. You should use a custom
    availability zone rather than the default returned by the
    os-availability-zone API. The availability zone must not include ':'
    in its name.
  in: body
  required: false
  type: string
aggregate_az_optional_update:
  description: |
    The availability zone of the host aggregate. You should use a custom
    availability zone rather than the default returned by the
    os-availability-zone API. The availability zone must not include ':'
    in its name.

    .. warning:: You should not change or unset the availability zone of an
      aggregate when that aggregate has hosts which contain servers in it
      since that may impact the ability for those servers to move to another
      host.
  in: body
  required: false
  type: string
aggregate_host_list:
  description: |
    A list of host ids in this aggregate.
  in: body
  required: true
  type: array
aggregate_id_body:
  description: |
    The ID of the host aggregate.
  in: body
  required: true
  type: integer
aggregate_metadata_request:
  description: |
    Metadata key and value pairs associated with the aggregate.
    The maximum size for each metadata key and value pair is 255 bytes.

    New keys will be added to existing aggregate metadata. For existing
    keys, if the value is ``null`` the entry is removed, otherwise the
    value is updated. Note that the special ``availability_zone`` metadata
    entry cannot be unset to ``null``.

    .. warning:: You should not change the availability zone of an
      aggregate when that aggregate has hosts which contain servers in it
      since that may impact the ability for those servers to move to another
      host.
  in: body
  required: true
  type: object
aggregate_metadata_response:
  description: |
    Metadata key and value pairs associated with the aggregate.
  in: body
  required: true
  type: object
aggregate_name:
  description: |
    The name of the host aggregate.
  in: body
  required: true
  type: string
aggregate_name_optional:
  description: |
    The name of the host aggregate.
  in: body
  required: false
  type: string
aggregate_remove_host:
  description: |
    The add_host object used to remove host from aggregate.
  in: body
  required: true
  type: object
aggregate_uuid:
  description: |
    The UUID of the host aggregate.
  in: body
  required: true
  type: string
  min_version: 2.41
aggregates:
  description: |
    The list of existing aggregates.
  in: body
  required: true
  type: array
alias:
  description: |
    A short name by which this extension is also known.
  in: body
  required: true
  type: string
alive:
  description: |
    Returns true if the instance is alive.
  in: body
  required: true
  type: boolean
architecture:
  description: |
    The name of the cpu architecture.
  in: body
  required: true
  type: string
associate_host:
  description: |
    The name of the host to associate.
  in: body
  required: true
  type: string
attachment_bdm_id_resp:
  description: |
    The UUID of the block device mapping record in Nova for the attachment.
  in: body
  required: true
  type: string
  min_version: 2.89
attachment_device_put_req:
  description: |
    Name of the device in the attachment object, such as, ``/dev/vdb``.
  in: body
  required: false
  type: string
  min_version: 2.85
attachment_device_resp:
  description: |
    Name of the device in the attachment object, such as, ``/dev/vdb``.
  in: body
  required: false
  type: string
attachment_id_put_req:
  description: |
    The UUID of the attachment.
  in: body
  required: false
  type: string
  min_version: 2.85
attachment_id_resp:
  description: |
    The UUID of the attachment.
  in: body
  required: false
  type: string
attachment_server_id_put_req:
  description: |
    The UUID of the server.
  in: body
  required: false
  type: string
  min_version: 2.85
attachment_server_id_resp:
  description: |
    The UUID of the server.
  in: body
  required: false
  type: string
attachment_volume_id_resp:
  description: |
    The UUID of the associated volume attachment in Cinder.
  in: body
  required: true
  type: string
  min_version: 2.89
attachment_volumeId_resp:
  description: |
    The UUID of the attached volume.
  in: body
  required: false
  type: string
availability_zone:
  description: |
    The availability zone.
  in: body
  required: false
  type: string
availability_zone_info:
  description: |
    The list of availability zone information.
  in: body
  required: true
  type: array
availability_zone_state:
  description: |
    The current state of the availability zone.
  in: body
  required: true
  type: object
availability_zone_unshelve:
  description: |
    The availability zone name. Specifying an availability zone is only
    allowed when the server status is ``SHELVED_OFFLOADED`` otherwise
    HTTP 409 conflict response is returned.

    Since microversion 2.91 ``"availability_zone":null`` allows unpinning the
    instance from any availability_zone it is pinned to.
  in: body
  required: false
  type: string
  min_version: 2.77
available:
  description: |
    Returns true if the availability zone is available.
  in: body
  required: true
  type: boolean
backup_name:
  description: |
    The name of the image to be backed up.
  in: body
  required: true
  type: string
backup_rotation:
  description: |
    The rotation of the back up image, the oldest image will be removed when image count
    exceed the rotation count.
  in: body
  required: true
  type: integer
backup_type:
  description: |
    The type of the backup, for example, ``daily``.
  in: body
  required: true
  type: string
baremetal_cpus:
  description: |
    Number of CPUs the node has.

    .. note:: This is a JSON string, even though it will look like an int value.
  in: body
  required: true
  type: string
baremetal_disk:
  description: |
    Amount of disk in GiB the node has.

    .. note:: This is a JSON string, even though it will look like an int value.
  in: body
  required: true
  type: string
baremetal_host:
  description: |
    This will always have the value ``IRONIC MANAGED``.
  in: body
  required: true
  type: string
baremetal_id:
  description: |
    UUID of the baremetal node.
  in: body
  required: true
  type: string
baremetal_instance_uuid:
  description: |
    UUID of the server instance on this node.
  in: body
  required: true
  type: string
baremetal_interfaces:
  description: |
    A list of interface objects for active interfaces on the baremetal
    node. Each will have an ``address`` field with the address.
  in: body
  required: true
  type: array
baremetal_mem:
  description: |
    Amount of memory in MiB the node has.

    .. note:: This is a JSON string, even though it will look like an int value.
  in: body
  required: true
  type: string
baremetal_node:
  description: |
    A baremetal node object.
  in: body
  required: true
  type: object
baremetal_nodes:
  description: |
    An array of baremetal node objects.
  in: body
  required: true
  type: array
baremetal_taskstate:
  description: |
    The Ironic task state for the node. See Ironic project for more
    details.
  in: body
  required: true
  type: string
binary:
  description: |
    The binary name of the service.
  in: body
  required: true
  type: string
block_device_mapping_v2:
  description: |
    Enables fine grained control of the block device mapping for an instance. This
    is typically used for booting servers from volumes.  An example format would look
    as follows:

      .. code-block:: javascript

        "block_device_mapping_v2": [{
            "boot_index": "0",
            "uuid": "ac408821-c95a-448f-9292-73986c790911",
            "source_type": "image",
            "volume_size": "25",
            "destination_type": "volume",
            "delete_on_termination": true,
            "tag": "disk1",
            "disk_bus": "scsi"}]

    In microversion 2.32, ``tag`` is an optional string attribute that can
    be used to assign a tag to the block device. This tag is then exposed to
    the guest in the metadata API and the config drive and is associated to
    hardware metadata for that block device, such as bus (ex: SCSI), bus
    address (ex: 1:0:2:0), and serial.

    A bug has caused the ``tag`` attribute to no longer be accepted starting
    with version 2.33. It has been restored in version 2.42.
  in: body
  required: false
  type: array
block_device_uuid:
  description: |
    This is the uuid of source resource. The uuid points to different resources
    based on the ``source_type``. For example, if ``source_type`` is ``image``,
    the block device is created based on the specified image which is retrieved
    from the image service. Similarly, if ``source_type`` is ``snapshot`` then
    the uuid refers to a volume snapshot in the block storage service. If
    ``source_type`` is ``volume`` then the uuid refers to a volume in the block
    storage service.
  in: body
  required: false
  type: string
block_migration:
  description: |
    Set to ``True`` to migrate local disks by using block migration. If the source
    or destination host uses shared storage and you set this value to ``True``, the
    live migration fails.
  in: body
  required: true
  type: boolean
  max_version: 2.24
block_migration_2_25:
  description: |
    Migrates local disks by using block migration. Set to ``auto`` which means
    nova will detect whether source and destination hosts on shared storage. if they are
    on shared storage, the live-migration won't be block migration. Otherwise the block
    migration will be executed. Set to ``True``, means the request will fail when the
    source or destination host uses shared storage. Set to ``False`` means the request
    will fail when the source and destination hosts are not on the shared storage.
  in: body
  required: true
  type: string
  min_version: 2.25
boot_index:
  description: |
    Defines the order in which a hypervisor tries devices when it attempts to boot
    the guest from storage.  Give each device a unique boot index starting from ``0``.
    To disable a device from booting, set the boot index to a negative value or use
    the default boot index value, which is ``None``.  The simplest usage is, set the
    boot index of the boot device to ``0`` and use the default boot index value, ``None``,
    for any other devices. Some hypervisors might not support booting from multiple
    devices; these hypervisors consider only the device with a boot index of ``0``.  Some
    hypervisors support booting from multiple devices but only if the devices are
    of different types. For example, a disk and CD-ROM.
  in: body
  required: true
  type: integer
cache:
  description: A list of image objects to cache.
  in: body
  required: true
  type: array
certificate:
  description: |
    The certificate object.
  in: body
  required: true
  type: object
changePassword:
  description: |
    The action to change an administrative password of the server.
  in: body
  required: true
  type: object
cidr:
  description: |
    The CIDR for address range.
  in: body
  required: true
  type: string
cloudpipe:
  description: |
    The cloudpipe object.
  in: body
  required: true
  type: object
cloudpipes:
  description: |
    The list of cloudpipe objects.
  in: body
  required: true
  type: array
code:
  description: |
    The HTTP response code for the event. The following codes are currently used:

      * 200 - successfully submitted event
      * 400 - the request is missing required parameter
      * 404 - the instance specified by ``server_uuid`` was not found
      * 422 - no host was found for the server specified by ``server_uuid``,
         so there is no route to this server.
  in: body
  required: true
  type: string
config_drive:
  description: |
    Indicates whether a config drive enables metadata injection. The config_drive
    setting provides information about a drive that the instance can mount at boot
    time. The instance reads files from the drive to get information that is normally
    available through the metadata service. This metadata is different from the user
    data. Not all cloud providers enable the ``config_drive``. Read more in the
    `OpenStack End User Guide <https://docs.openstack.org/nova/latest/user/config-drive.html>`_.
  in: body
  required: false
  type: boolean
config_drive_diagnostics:
  description: |
    Indicates whether or not a config drive was used for this server.
  in: body
  required: true
  type: boolean
  min_version: 2.48
config_drive_resp:
  description: |
    Indicates whether or not a config drive was used for this server.
    The value is ``True`` or an empty string. An empty string stands for
    ``False``.
  in: body
  required: true
  type: string
config_drive_resp_update_rebuild:
  description: |
    Indicates whether or not a config drive was used for this server.
    The value is ``True`` or an empty string. An empty string stands for
    ``False``.
  in: body
  required: true
  type: string
  min_version: 2.75
configure_project_cloudpipe:
  description: |
    VPN IP and Port information to configure the cloudpipe instance..
  in: body
  required: true
  type: object
confirmResize:
  description: |
    The action to confirm a resize operation.
  in: body
  required: true
  type: none
console:
  description: |
    The console object.
  in: body
  required: true
  type: object
console_host:
  description: |
    The name or ID of the host.
  in: body
  required: false
  type: string
console_id_in_body:
  description: |
    The UUID of the console.
  in: body
  required: true
  type: string
console_output:
  description: |
    The console output as a string. Control characters will be escaped
    to create a valid JSON string.
  in: body
  required: true
  type: string
console_password:
  description: |
    The password for the console.
  in: body
  required: true
  type: string
console_type:
  description: |
    The type of the console.
  in: body
  required: true
  type: string
consoles:
  description: |
    The list of console objects.
  in: body
  required: true
  type: array
contents:
  description: |
    The file contents field in the personality object.
  in: body
  required: true
  type: string
  max_version: 2.56
cores: &cores
  description: |
    The number of allowed server cores for each tenant.
  in: body
  required: true
  type: integer
cores_quota_class: &cores_quota_class
  <<: *cores
  description: |
    The number of allowed server cores for the quota class.
cores_quota_class_optional:
  <<: *cores_quota_class
  required: false
cores_quota_details:
  description: |
    The object of detailed cores quota, including in_use, limit and
    reserved number of cores.
  in: body
  required: true
  type: object
cores_quota_optional:
  description: |
    The number of allowed server cores for each tenant.
  in: body
  required: false
  type: integer
cpu_details_diagnostics:
  description: |
    The list of dictionaries with detailed information about VM CPUs.
    Following fields are presented in each dictionary:

    - ``id`` - the ID of CPU (Integer)

    - ``time`` - CPU Time in nano seconds (Integer)

    - ``utilisation`` - CPU utilisation in percents (Integer)
  in: body
  required: true
  type: array
  min_version: 2.48
cpu_info:
  description: |
    A dictionary that contains cpu information like ``arch``, ``model``,
    ``vendor``, ``features`` and ``topology``. The content of this field is
    hypervisor specific.

    .. note::

      Since version 2.28 ``cpu_info`` field is returned as a dictionary
      instead of string.
  in: body
  required: true
  type: object
  max_version: 2.87
create_info:
  description: |
    Information for snapshot creation.
  in: body
  required: true
  type: object
create_info_id:
  description: |
    Its an arbitrary string that gets passed back to the user.
  in: body
  required: false
  type: string
create_info_id_resp:
  description: |
    Its the same arbitrary string which was sent in request body.

    .. note::

      This string is passed back to user as it is and not being
      used in Nova internally. So use ``snapshot_id`` instead for further
      operation on this snapshot.
  in: body
  required: true
  type: string
createBackup:
  description: |
    The action.
  in: body
  required: true
  type: object
created:
  description: |
    The date and time when the resource was created. The date and time
    stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_

    ::

      CCYY-MM-DDThh:mm:ss±hh:mm

    For example, ``2015-08-27T09:49:58-05:00``. The ``±hh:mm``
    value, if included, is the time zone as an offset from UTC.  In
    the previous example, the offset value is ``-05:00``.
  in: body
  required: true
  type: string
createImage:
  description: |
    The action to create a snapshot of the image or
    the volume(s) of the server.
  in: body
  required: true
  type: object
current_workload:
  description: |
    The current_workload is the number of tasks the hypervisor is responsible
    for. This will be equal or greater than the number of active VMs on the
    system (it can be greater when VMs are being deleted and the hypervisor is
    still cleaning up).
  in: body
  required: true
  type: integer
  max_version: 2.87
current_workload_total:
  description: |
    The current_workload is the number of tasks the hypervisors are responsible
    for. This will be equal or greater than the number of active VMs on the
    systems (it can be greater when VMs are being deleted and a hypervisor is
    still cleaning up).
  in: body
  required: true
  type: integer
data:
  description: |
    The certificate.
  in: body
  required: true
  type: string
delete_on_termination:
  description: |
    To delete the boot volume when the server is destroyed, specify ``true``.
    Otherwise, specify ``false``. Default: ``false``
  in: body
  required: false
  type: boolean
delete_on_termination_attachments_req:
  description: |
    To delete the attached volume when the server is destroyed, specify ``true``.
    Otherwise, specify ``false``. Default: ``false``
  in: body
  required: false
  type: boolean
  min_version: 2.79
delete_on_termination_attachments_resp:
  description: |
    A flag indicating if the attached volume will be deleted when the server is
    deleted.
  in: body
  required: true
  type: boolean
  min_version: 2.79
delete_on_termination_put_req:
  description: |
    A flag indicating if the attached volume will be deleted when the server is
    deleted.
  in: body
  required: false
  type: boolean
  min_version: 2.85
deleted:
  description: |
    A boolean indicates whether this aggregate is deleted or not, if it has
    not been deleted, ``false`` will appear.
  in: body
  required: true
  type: boolean
deleted_at:
  description: |
    The date and time when the resource was deleted. If the resource has
    not been deleted yet, this field will be ``null``, The date and time
    stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_

    ::

      CCYY-MM-DDThh:mm:ss±hh:mm

    For example, ``2015-08-27T09:49:58-05:00``. The ``±hh:mm``
    value, if included, is the time zone as an offset from UTC.  In
    the previous example, the offset value is ``-05:00``.
  in: body
  required: true
  type: string
description:
  description: |
    Security group description.
  in: body
  required: true
  type: string
destination_type:
  description: |
    Defines where the block device mapping will reside. Valid values are:

    * ``local``: The ephemeral disk resides local to the compute host on
      which the server runs
    * ``volume``: The persistent volume is stored in the block storage service
  in: body
  required: false
  type: string
device:
  description: |
    Name of the device such as, ``/dev/vdb``. Omit or set this parameter to null for
    auto-assignment, if supported. If you specify this parameter, the device must
    not exist in the guest operating system. Note that as of the 12.0.0 Liberty release,
    the Nova libvirt driver no longer honors a user-supplied device name. This is
    the same behavior as if the device name parameter is not supplied on the request.
  in: body
  required: false
  type: string
device_name:
  description: |
    A path to the device for the volume that you want to use to boot the server.
    Note that as of the 12.0.0 Liberty release, the Nova libvirt driver no
    longer honors a user-supplied device name. This is the same behavior as if
    the device name parameter is not supplied on the request.
  in: body
  required: false
  type: string
device_resp:
  description: |
    Name of the device such as, ``/dev/vdb``.
  in: body
  required: true
  type: string
device_tag_bdm:
  description: |
    A device role tag that can be applied to a block device. The guest OS of a
    server that has devices tagged in this manner can access hardware metadata
    about the tagged devices from the metadata API and on the config drive, if
    enabled.

    .. note:: Due to a bug, block device tags are accepted in version 2.32 and
      subsequently starting with version 2.42.
  in: body
  required: false
  type: string
  min_version: 2.32
device_tag_bdm_attachment:
  description: |
    A device role tag that can be applied to a volume when attaching it to the
    VM. The guest OS of a server that has devices tagged in this manner can
    access hardware metadata about the tagged devices from the metadata API and
    on the config drive, if enabled.

    .. note:: Tagged volume attachment is not supported for shelved-offloaded
              instances.
  in: body
  required: false
  type: string
  min_version: 2.49
device_tag_bdm_attachment_put_req:
  description: |
    The device tag applied to the volume block device or ``null``.
  in: body
  required: true
  type: string
  min_version: 2.85
device_tag_bdm_attachment_resp:
  description: |
    The device tag applied to the volume block device or ``null``.
  in: body
  required: true
  type: string
  min_version: 2.70
device_tag_nic:
  description: |
    A device role tag that can be applied to a network interface. The guest OS
    of a server that has devices tagged in this manner can access hardware
    metadata about the tagged devices from the metadata API and on the config
    drive, if enabled.

    .. note:: Due to a bug, network interface tags are accepted between 2.32
      and 2.36 inclusively, and subsequently starting with version 2.42.
  in: body
  required: false
  type: string
  min_version: 2.32
device_tag_nic_attachment:
  description: |
    A device role tag that can be applied to a network interface when attaching
    it to the VM. The guest OS of a server that has devices tagged in this
    manner can access hardware metadata about the tagged devices from the
    metadata API and on the config
    drive, if enabled.
  in: body
  required: false
  type: string
  min_version: 2.49
device_tag_nic_attachment_resp:
  description: |
    The device tag applied to the virtual network interface or ``null``.
  in: body
  required: true
  type: string
  min_version: 2.70
device_type:
  description: |
    The device type. For example, ``disk``, ``cdrom``.
  in: body
  required: false
  type: string
device_volume_type:
  description: |
    The device ``volume_type``. This can be used to specify the type of volume
    which the compute service will create and attach to the server.
    If not specified, the block storage service will provide a default volume
    type. See the `block storage volume types API <https://docs.openstack.org/api-ref/block-storage/v3/#volume-types-types>`_
    for more details.
    There are some restrictions on ``volume_type``:

    - It can be a volume type ID or name.
    - It is only supported with ``source_type`` of ``blank``, ``image`` or
      ``snapshot``.
    - It is only supported with ``destination_type`` of ``volume``.
  in: body
  required: false
  type: string
  min_version: 2.67
# Optional input parameter in the body for PUT /os-services/{service_id} added
# in microversion 2.53.
disabled_reason_2_53_in:
  description: |
    The reason for disabling a service. The minimum length is 1 and the
    maximum length is 255. This may only be requested with ``status=disabled``.
  in: body
  required: false
  type: string
disabled_reason_body:
  description: |
    The reason for disabling a service.
  in: body
  required: true
  type: string
disk_available_least:
  description: |
    The actual free disk on this hypervisor(in GiB). If allocation ratios used
    for overcommit are configured, this may be negative. This is intentional as
    it provides insight into the amount by which the disk is overcommitted.
  in: body
  required: true
  type: integer
  max_version: 2.87
disk_available_least_total:
  description: |
    The actual free disk on all hypervisors(in GiB). If allocation ratios used
    for overcommit are configured, this may be negative. This is intentional as
    it provides insight into the amount by which the disk is overcommitted.
  in: body
  required: true
  type: integer
disk_bus:
  description: |
    Disk bus type, some hypervisors (currently only libvirt) support
    specify this parameter. Some example disk_bus values can be: ``fdc``,
    ``ide``, ``sata``, ``scsi``, ``usb``, ``virtio``, ``xen``, ``lxc``
    and ``uml``. Support for each bus type depends on the virtualization driver
    and underlying hypervisor.
  in: body
  required: false
  type: string
disk_config:
  description: |
    Disk configuration. The value is either:

    - ``AUTO``. The API builds the server with a single partition the size of
      the target flavor disk. The API automatically adjusts the file system to
      fit the entire partition.

    - ``MANUAL``. The API builds the server by using the partition scheme and
      file system that is in the source image. If the target flavor disk is
      larger, The API does not partition the remaining disk space.
  in: body
  required: true
  type: string
disk_details_diagnostics:
  description: |
    The list of dictionaries with detailed information about VM disks.
    Following fields are presented in each dictionary:

    - ``read_bytes`` - Disk reads in bytes (Integer)

    - ``read_requests`` - Read requests (Integer)

    - ``write_bytes`` - Disk writes in bytes (Integer)

    - ``write_requests`` - Write requests (Integer)

    - ``errors_count`` - Disk errors (Integer)
  in: body
  required: true
  type: array
  min_version: 2.48
disk_over_commit:
  description: |
    Set to ``True`` to enable over commit when the destination host is checked for
    available disk space.  Set to ``False`` to disable over commit. This setting affects
    only the libvirt virt driver.
  in: body
  required: true
  type: boolean
  max_version: 2.25
display_description:
  description: |
    The volume description.
  in: body
  required: true
  type: string
display_description_optional:
  description: |
    The volume description.
  in: body
  required: false
  type: string
display_name:
  description: |
    The volume name.
  in: body
  required: true
  type: string
display_name_optional:
  description: |
    The volume name.
  in: body
  required: false
  type: string
driver_diagnostics:
  description: |
    The driver on which the VM is running. Possible values are:

    - ``libvirt``
    - ``xenapi``
    - ``vmwareapi``
    - ``ironic``
  in: body
  required: true
  type: string
  min_version: 2.48
ended_at:
  description: |
    The date and time when the server was deleted.

    The date and time stamp format is as follows:

    ::

      CCYY-MM-DDThh:mm:ss.NNNNNN

    For example, ``2015-08-27T09:49:58.123456``.
    If the server hasn't been deleted yet, its value is ``null``.
  in: body
  required: true
  type: string
ended_at_optional:
  description: |
    The date and time when the server was deleted.

    The date and time stamp format is as follows:

    ::

      CCYY-MM-DDThh:mm:ss.NNNNNN

    For example, ``2015-08-27T09:49:58.123456``.
    If the server hasn't been deleted yet, its value is ``null``.
  in: body
  required: false
  type: string
errors:
  description: |
    The number of errors.
  in: body
  required: true
  type: integer
evacuate:
  description: |
    The action to evacuate a server to another host.
  in: body
  required: true
  type: object
event:
  description: |
    The name of the event.
  in: body
  required: true
  type: string
event_details:
  min_version: 2.84
  description: |
    Details of the event. May be ``null``.
  in: body
  required: true
  type: string
event_finish_time:
  description: |
    The date and time when the event was finished. The date and time
    stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_

    ::

      CCYY-MM-DDThh:mm:ss±hh:mm

    For example, ``2015-08-27T09:49:58-05:00``. The ``±hh:mm``
    value, if included, is the time zone as an offset from UTC.  In
    the previous example, the offset value is ``-05:00``.
  in: body
  required: true
  type: string
event_host:
  min_version: 2.62
  description: |
    The name of the host on which the event occurred.

    Policy defaults enable only users with the administrative role to see
    an instance action event host. Cloud providers can change these
    permissions through the ``policy.json`` file.
  in: body
  required: false
  type: string
event_hostId:
  min_version: 2.62
  description: |
    An obfuscated hashed host ID string, or the empty string if there is no
    host for the event. This is a hashed value so will not actually look like
    a hostname, and is hashed with data from the project_id, so the same
    physical host as seen by two different project_ids will be different.
    This is useful when within the same project you need to determine if two
    events occurred on the same or different physical hosts.
  in: body
  required: true
  type: string
event_name:
  description: |
    The event name. A valid value is:

    - ``network-changed``
    - ``network-vif-plugged``
    - ``network-vif-unplugged``
    - ``network-vif-deleted``
    - ``volume-extended`` (since microversion ``2.51``)
    - ``power-update`` (since microversion ``2.76``)
    - ``accelerator-request-bound`` (since microversion ``2.82``)

  in: body
  required: true
  type: string
event_result:
  description: |
    The result of the event.
  in: body
  required: true
  type: string
event_start_time:
  description: |
    The date and time when the event was started. The date and time
    stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_

    ::

      CCYY-MM-DDThh:mm:ss±hh:mm

    For example, ``2015-08-27T09:49:58-05:00``. The ``±hh:mm``
    value, if included, is the time zone as an offset from UTC.  In
    the previous example, the offset value is ``-05:00``.
  in: body
  required: true
  type: string
event_status:
  description: |
    The event status. A valid value is ``failed``, ``completed``, or ``in-progress``.
    Default is ``completed``.
  in: body
  required: false
  type: string
event_tag:
  description: |
    A string value that identifies the event. Certain types of events require
    specific tags:

    - For the ``accelerator-request-bound`` event, the tag must be
      the accelerator request UUID.
    - For the ``power-update`` event the tag must be either be ``POWER_ON``
      or ``POWER_OFF``.
    - For the ``volume-extended`` event the tag must be the volume id.

  in: body
  required: false
  type: string
event_traceback:
  description: |
    The traceback stack if an error occurred in this event.

    Policy defaults enable only users with the administrative role to see
    an instance action event traceback. Cloud providers can change these
    permissions through the ``policy.json`` file.
  in: body
  required: true
  type: string
events:
  description: |
    List of external events to process.
  in: body
  required: true
  type: array
extension:
  description: |
    An ``extension`` object.
  in: body
  required: true
  type: object
extension_description:
  description: |
    Text describing this extension's purpose.
  in: body
  required: true
  type: string
extension_links:
  description: |
    Links pertaining to this extension. This is a list of dictionaries, each including
    keys ``href`` and ``rel``.
  in: body
  required: true
  type: array
extension_name:
  description: |
    Name of the extension.
  in: body
  required: true
  type: string
extensions:
  description: |
    List of ``extension`` objects.
  in: body
  required: true
  type: array
extra_specs:
  description: |
    A dictionary of the flavor's extra-specs key-and-value pairs.  It appears
    in the os-extra-specs' "create" REQUEST body, as well as the
    os-extra-specs' "create" and "list" RESPONSE body.
  in: body
  required: true
  type: object
extra_specs_2_47:
  min_version: 2.47
  description: |
    A dictionary of the flavor's extra-specs key-and-value pairs.  This will
    only be included if the user is allowed by policy to index flavor
    extra_specs.
  in: body
  required: false
  type: object
extra_specs_2_61:
  min_version: 2.61
  description: |
    A dictionary of the flavor's extra-specs key-and-value pairs.  This will
    only be included if the user is allowed by policy to index flavor
    extra_specs.
  in: body
  required: false
  type: object
fault:
  description: |
    A fault object. Only displayed when the server status is ``ERROR`` or
    ``DELETED`` and a fault occurred.
  in: body
  required: false
  type: object
fault_code:
  description: |
    The error response code.
  in: body
  required: true
  type: integer
fault_created:
  description: |
    The date and time when the exception was raised. The date and time
    stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_

    ::

      CCYY-MM-DDThh:mm:ss±hh:mm

    For example, ``2015-08-27T09:49:58-05:00``. The ``±hh:mm``
    value, if included, is the time zone as an offset from UTC.  In
    the previous example, the offset value is ``-05:00``.
  in: body
  required: true
  type: string
fault_details:
  description: |
    The stack trace. It is available if the response code is not 500 or
    you have the administrator privilege
  in: body
  required: false
  type: string
fault_message:
  description: |
    The error message.
  in: body
  required: true
  type: string
fixed_address:
  description: |
    The fixed IP address with which you want to associate the floating IP address.
  in: body
  required: false
  type: string
fixed_ip:
  description: |
    A fixed IPv4 address for the NIC. Valid with a ``neutron`` or ``nova-networks``
    network.
  in: body
  required: false
  type: string
fixed_ip_address:
  description: |
    Fixed IP associated with floating IP network.
  in: body
  required: true
  type: string
fixed_ip_host:
  description: |
    The hostname of the host that manages the server that is associated with
    this fixed IP address.
  in: body
  required: true
  type: string
fixed_ip_hostname:
  description: |
    The hostname of the server that is associated with this fixed IP address.
  in: body
  required: true
  type: string
fixed_ip_obj:
  description: |
    A fixed IP address object.
  in: body
  required: true
  type: object
fixed_ips:
  description: |
    Fixed IP addresses.  If you request a specific fixed IP address without
    a ``net_id``, the request returns a ``Bad Request (400)`` response code.
  in: body
  required: false
  type: array
fixed_ips_quota:
  description: |
    The number of allowed fixed IP addresses for each tenant. Must be equal to or
    greater than the number of allowed servers.
  in: body
  required: true
  type: integer
  max_version: 2.35
fixed_ips_quota_class: &fixed_ips_quota_class
  description: |
    The number of allowed fixed IP addresses for the quota class. Must be
    equal to or greater than the number of allowed servers.
  in: body
  required: true
  type: integer
  max_version: 2.49
fixed_ips_quota_class_optional:
  <<: *fixed_ips_quota_class
  required: false
fixed_ips_quota_details:
  description: |
    The object of detailed fixed ips quota, including in_use, limit and
    reserved number of fixed ips.
  in: body
  required: true
  type: object
  max_version: 2.35
fixed_ips_quota_optional:
  description: |
    The number of allowed fixed IP addresses for each tenant. Must be equal to or
    greater than the number of allowed servers.
  in: body
  required: false
  type: integer
  max_version: 2.35
fixed_ips_resp:
  description: |
    Fixed IP addresses with subnet IDs.
  in: body
  required: true
  type: array
flavor:
  description: |
    The ID and links for the flavor for your server instance. A flavor is a combination
    of memory, disk size, and CPUs.
  in: body
  required: true
  type: object
flavor_access:
  description: |
    A list of objects, each with the keys ``flavor_id`` and ``tenant_id``.
  in: body
  required: true
  type: array
flavor_cpus:
  in: body
  required: true
  type: integer
  description: |
    The number of virtual CPUs that will be allocated to the server.
flavor_cpus_2_47:
  min_version: 2.47
  in: body
  required: true
  type: integer
  description: |
    The number of virtual CPUs that were allocated to the server.
flavor_description:
  type: string
  in: body
  required: false
  min_version: 2.55
  description: |
    A free form description of the flavor. Limited to 65535 characters
    in length. Only printable characters are allowed.
flavor_description_required:
  type: string
  in: body
  required: true
  description: |
    A free form description of the flavor. Limited to 65535 characters
    in length. Only printable characters are allowed.
flavor_description_resp:
  description: |
    The description of the flavor.
  in: body
  required: true
  type: string
  min_version: 2.55
flavor_description_resp_no_min:
  description: |
    The description of the flavor.
  in: body
  required: true
  type: string
flavor_disabled:
  in: body
  required: false
  type: boolean
  description: |
    Whether or not the flavor has been administratively disabled.
    This is an artifact of the legacy v2 API and will always be set to
    ``false``. There is currently no way to disable a flavor and set this to
    ``true``.
flavor_disk:
  in: body
  required: true
  type: integer
  description: |
    The size of the root disk that will be created in GiB. If 0 the
    root disk will be set to exactly the size of the image used to
    deploy the instance. However, in this case the scheduler cannot
    select the compute host based on the virtual image size. Therefore,
    0 should only be used for volume booted instances or for testing
    purposes. Volume-backed instances can be enforced for flavors with
    zero root disk via the ``os_compute_api:servers:create:zero_disk_flavor``
    policy rule.
flavor_disk_2_47:
  min_version: 2.47
  in: body
  required: true
  type: integer
  description: |
    The size of the root disk that was created in GiB.
flavor_ephem_disk:
  in: body
  required: true
  type: integer
  description: |
    The size of the ephemeral disk that will be created, in
    GiB. Ephemeral disks may be written over on server state
    changes. So should only be used as a scratch space for
    applications that are aware of its limitations. Defaults to 0.
flavor_ephem_disk_2_47:
  min_version: 2.47
  in: body
  required: true
  type: integer
  description: |
    The size of the ephemeral disk that was created, in GiB.
flavor_ephem_disk_in:
  in: body
  required: false
  type: integer
  description: |
    The size of the ephemeral disk that will be created, in
    GiB. Ephemeral disks may be written over on server state
    changes. So should only be used as a scratch space for
    applications that are aware of its limitations. Defaults to 0.
flavor_extra_spec_key2:
  description: |
    The extra spec key of a flavor.  It appears in the os-extra-specs'
    "create" and "update" REQUEST body, as well as the os-extra-specs'
    "create", "list", "show", and "update" RESPONSE body.
  in: body
  required: true
  type: string
flavor_extra_spec_key_2_47:
  description: |
    The extra spec key of a flavor.
  in: body
  required: true
  type: string
  min_version: 2.47
flavor_extra_spec_value:
  description: |
    The extra spec value of a flavor. It appears in the os-extra-specs'
    "create" and "update" REQUEST body, as well as the os-extra-specs'
    "create", "list", "show", and "update" RESPONSE body.
  in: body
  required: true
  type: string
flavor_extra_spec_value_2_47:
  description: |
    The extra spec value of a flavor.
  in: body
  required: true
  type: string
  min_version: 2.47
flavor_id_body:
  description: |
    The ID of the flavor. While people often make this look like
    an int, this is really a string.
  in: body
  required: true
  type: string
flavor_id_body_2_46:
  description: |
    The ID of the flavor. While people often make this look like
    an int, this is really a string.
  in: body
  required: true
  type: string
  max_version: 2.46
flavor_id_body_create:
  description: |
    Only alphanumeric characters with hyphen '-', underscore '_', spaces
    and dots '.' are permitted. If an ID is not provided, then a default UUID
    will be assigned.
  in: body
  required: false
  type: string
flavor_is_public:
  description: |
    Whether the flavor is public (available to all projects) or scoped
    to a set of projects. Default is True if not specified.
  in: body
  required: true
  type: boolean
flavor_is_public_in:
  description: |
    Whether the flavor is public (available to all projects) or scoped
    to a set of projects. Default is True if not specified.
  in: body
  required: false
  type: boolean
flavor_links_2_46:
  description: |
    Links to the flavor resource. See `API Guide / Links and
    References
    <https://docs.openstack.org/api-guide/compute/links_and_references.html>`_
    for more info.
  in: body
  required: true
  type: array
  max_version: 2.46
flavor_name:
  description: |
    The display name of a flavor.
  in: body
  required: true
  type: string
flavor_name_optional:
  description: |
    The display name of a flavor.
  in: body
  required: false
  type: string
flavor_original_name:
  description: |
    The display name of a flavor.
  in: body
  required: true
  type: string
  min_version: 2.47
flavor_ram:
  description: |
    The amount of RAM a flavor has, in MiB.
  in: body
  required: true
  type: integer
flavor_ram_2_47:
  description: |
    The amount of RAM a flavor has, in MiB.
  in: body
  required: true
  type: integer
  min_version: 2.47
flavor_rxtx_factor:
  description: |
    The receive / transmit factor (as a float) that will be set on
    ports if the network backend supports the QOS extension.
    Otherwise it will be ignored. It defaults to 1.0.
  in: body
  required: true
  type: float
flavor_rxtx_factor_in:
  description: |
    The receive / transmit factor (as a float) that will be set on
    ports if the network backend supports the QOS extension.
    Otherwise it will be ignored. It defaults to 1.0.
  in: body
  required: false
  type: float
flavor_server:
  description: |
    Before microversion 2.47 this contains the ID and links for the flavor
    used to boot the server instance. This can be an empty object in case
    flavor information is no longer present in the system.

    As of microversion 2.47 this contains a subset of the actual flavor
    information used to create the server instance, represented as a nested
    dictionary.
  in: body
  required: true
  type: object
flavor_swap:
  description: |
    The size of a dedicated swap disk that will be allocated, in
    MiB. If 0 (the default), no dedicated swap disk will be created.
    Currently, the empty string ('') is used to represent 0.
    As of microversion 2.75 default return value of swap is 0
    instead of empty string.
  in: body
  required: true
  type: integer
flavor_swap_2_47:
  description: |
    The size of a dedicated swap disk that was allocated, in MiB.
  in: body
  required: true
  type: integer
  min_version: 2.47
flavor_swap_in:
  description: |
    The size of a dedicated swap disk that will be allocated, in
    MiB. If 0 (the default), no dedicated swap disk will be created.
  in: body
  required: false
  type: integer
flavorRef:
  description: |
    The flavor reference, as an ID (including a UUID) or full URL,
    for the flavor for your server instance.
  in: body
  required: true
  type: string
flavorRef_resize:
  description: |
    The flavor ID for resizing the server. The size of the disk in the flavor
    being resized to must be greater than or equal to the size of the disk in
    the current flavor.

    If a specified flavor ID is the same as the current one of the server,
    the request returns a ``Bad Request (400)`` response code.
  in: body
  required: true
  type: string
flavors:
  description: |
    An array of flavor objects.
  in: body
  required: true
  type: array
floating_ip:
  description: |
    The floating ip address.
  in: body
  required: true
  type: string
floating_ip_bulk_object:
  description: |
    The floating ip bulk address object.
  in: body
  required: true
  type: object
floating_ip_id_value:
  description: |
    The floating IP id value.

    .. note::

      For nova-network, the value will be of type integer, whereas for
      neutron, the value will be of type string.
  in: body
  required: true
  type: string
floating_ip_obj:
  description: |
    A floating IP address object.
  in: body
  required: true
  type: object
floating_ip_pool_name:
  description: |
    The name of the floating IP pool.
  in: body
  required: true
  type: string
floating_ip_pool_name_optional:
  description: |
    The name of the floating IP pool
  in: body
  required: false
  type: string
floating_ip_pool_name_or_id:
  description: |
    The name or ID of the floating IP pool.
  in: body
  required: true
  type: string
floating_ip_pools:
  description: |
    The ``floating_ip_pools`` object.
  in: body
  required: true
  type: array
floating_ips:
  description: |
    The number of allowed floating IP addresses for each tenant.
  in: body
  required: true
  type: integer
  max_version: 2.35
floating_ips_list:
  description: |
    An array of floating ip objects.
  in: body
  required: true
  type: array
floating_ips_quota_class: &floating_ips_quota_class
  description: |
    The number of allowed floating IP addresses for the quota class.
  in: body
  required: true
  type: integer
  max_version: 2.49
floating_ips_quota_class_optional:
  <<: *floating_ips_quota_class
  required: false
floating_ips_quota_details:
  description: |
    The object of detailed floating ips quota, including in_use, limit and
    reserved number of floating ips.
  in: body
  required: true
  type: object
  max_version: 2.35
floating_ips_quota_optional:
  description: |
    The number of allowed floating IP addresses for each tenant.
  in: body
  required: false
  type: integer
  max_version: 2.35
force:
  description: |
    You can force the update even if the quota has already been used and the reserved
    quota exceeds the new quota. To force the update, specify the ``"force": "True"``.
    Default is ``False``.
  in: body
  required: false
  type: boolean
force_evacuate:
  description: |
    Force an evacuation by not verifying the provided destination host by the
    scheduler.

    .. warning:: This could result in failures to actually evacuate the
      instance to the specified host. It is recommended to either not specify
      a host so that the scheduler will pick one, or specify a host without
      ``force=True`` set.

      Furthermore, this should not be specified when evacuating instances
      managed by a clustered hypervisor driver like ironic since you
      cannot specify a node, so the compute service will pick a node randomly
      which may not be able to accommodate the instance.
  in: body
  required: false
  type: boolean
  min_version: 2.29
  max_version: 2.67
force_live_migrate:
  description: |
    Force a live-migration by not verifying the provided destination host by
    the scheduler.

    .. warning:: This could result in failures to actually live migrate the
      instance to the specified host. It is recommended to either not specify
      a host so that the scheduler will pick one, or specify a host without
      ``force=True`` set.
  in: body
  required: false
  type: boolean
  min_version: 2.30
  max_version: 2.67
force_migration_complete:
  description: |
    The action to force an in-progress live migration to complete.
  in: body
  required: true
  type: none
force_snapshot:
  description: |
    Indicates whether to create a snapshot, even if the volume is attached.
  in: body
  required: false
  type: boolean
# This is both the request and response parameter for
# PUT /os-services/force-down which was added in 2.11.
forced_down_2_11:
  description: |
    Whether or not this service was forced down manually by an
    administrator after the service was fenced. This value is useful
    to know that some 3rd party has verified the service should be
    marked down.
  in: body
  required: true
  type: boolean
  min_version: 2.11
# This is the optional request input parameter for
# PUT /os-services/{service_id} added in 2.53.
forced_down_2_53_in:
  description: |
    ``forced_down`` is a manual override to tell nova that the service in
    question has been fenced manually by the operations team (either hard
    powered off, or network unplugged). That signals that it is safe to proceed
    with ``evacuate`` or other operations that nova has safety checks to
    prevent for hosts that are up.

    .. warning::

       Setting a service forced down without completely fencing it will likely
       result in the corruption of VMs on that host.

  in: body
  required: false
  type: boolean
# This is the response output parameter for
# PUT /os-services/{service_id} added in 2.53.
forced_down_2_53_out:
  description: |
    Whether or not this service was forced down manually by an
    administrator after the service was fenced. This value is useful
    to know that some 3rd party has verified the service should be
    marked down.
  in: body
  required: true
  type: boolean
forceDelete:
  description: |
    The action.
  in: body
  required: true
  type: none
free_ram_mb:
  description: |
    The free RAM in this hypervisor(in MiB). This does not take allocation
    ratios used for overcommit into account so this value may be negative.
  in: body
  required: true
  type: integer
  max_version: 2.87
free_ram_mb_total:
  description: |
    The free RAM on all hypervisors(in MiB). This does not take allocation
    ratios used for overcommit into account so this value may be negative.
  in: body
  required: true
  type: integer
from_port:
  description: |
    The port at start of range.
  in: body
  required: true
  type: integer
group:
  description: |
    A ``group`` object. Includes the ``tenant_id`` and the source security
    group ``name``.
  in: body
  required: true
  type: object
group_id:
  description: |
    The source security group ID.
  in: body
  required: false
  type: string
guest_format:
  description: |
    Specifies the guest server disk file system format, such as ``ext2``,
    ``ext3``, ``ext4``, ``xfs`` or ``swap``.

    Swap block device mappings have the following restrictions:

    * The ``source_type`` must be ``blank``
    * The ``destination_type`` must be ``local``
    * There can only be one swap disk per server
    * The size of the swap disk must be less than or equal to the ``swap``
      size of the flavor
  in: body
  required: false
  type: string
host:
  description: |
    The name or ID of the host to which the server is evacuated.
    If you omit this parameter, the scheduler chooses a host.

    .. warning:: Prior to microversion 2.29, specifying a host will bypass
      validation by the scheduler, which could result in failures to actually
      evacuate the instance to the specified host, or over-subscription of the
      host. It is recommended to either not specify a host so that the
      scheduler will pick one, or specify a host with microversion >= 2.29 and
      without ``force=True`` set.
  in: body
  required: false
  type: string
host_cpu:
  description: |
    The number of virtual CPUs on the host.
  in: body
  required: true
  type: integer
host_disk_gb:
  description: |
    The disk size on the host (in GiB).
  in: body
  required: true
  type: integer
host_done_num:
  description: |
    The number of the hosts whose instance audit tasks have been done.
  in: body
  required: true
  type: integer
host_ip:
  description: |
    The IP address of the hypervisor's host.
  in: body
  required: true
  type: string
host_maintenance_mode:
  description: |
    Mode of maintenance state, either ``on_maintenance`` or
    ``off_maintenance``.
  in: body
  required: false
  type: string
host_maintenance_mode_in:
  description: |
    Mode of maintenance state, either ``enable`` or ``disable``.
  in: body
  required: false
  type: string
host_memory_mb:
  description: |
    The memory size on the host (in MiB).
  in: body
  required: true
  type: integer
host_migration:
  description: |
    The host to which to migrate the server. If this parameter is ``None``,
    the scheduler chooses a host.

    .. warning:: Prior to microversion 2.30, specifying a host will bypass
      validation by the scheduler, which could result in failures to actually
      migrate the instance to the specified host, or over-subscription of the
      host. It is recommended to either not specify a host so that the
      scheduler will pick one, or specify a host with microversion >= 2.30 and
      without ``force=True`` set.
  in: body
  required: true
  type: string
host_migration_2_56:
  description: |
    The host to which to migrate the server. If you specify ``null`` or
    don't specify this parameter, the scheduler chooses a host.
  in: body
  required: false
  type: string
  min_version: 2.56
host_name_body:
  description: |
    The name of the host.
  in: body
  required: true
  type: string
host_not_run:
  description: |
    A list of the hosts whose instance audit tasks have not run.
  in: body
  required: true
  type: array
host_not_run_num:
  description: |
    The number of the hosts whose instance audit tasks have not run.
  in: body
  required: true
  type: integer
host_num:
  description: |
    The number of the hosts.
  in: body
  required: true
  type: integer
host_power_action:
  description: |
    The power action on the host.
  in: body
  required: true
  type: string
host_project:
  description: |
    The project id (or special name like total, used_now, used_max).
  in: body
  required: true
  type: string
host_resource:
  description: |
    The resource info of the host.
  in: body
  required: true
  type: object
host_resource_array:
  description: |
    The array that includes resource info of the host.
  in: body
  required: true
  type: array
host_running_num:
  description: |
    The number of the hosts whose instance audit tasks are running.
  in: body
  required: true
  type: integer
host_service:
  description: |
    The name of the service which is running on the host.
  in: body
  required: true
  type: string
host_status:
  description: |
    The host status. Values where next value in list can override the previous:

    - ``UP`` if nova-compute up.

    - ``UNKNOWN`` if nova-compute not reported by servicegroup driver.

    - ``DOWN`` if nova-compute forced down.

    - ``MAINTENANCE`` if nova-compute is disabled.

    - Empty string indicates there is no host for server.

    This attribute appears in the response only if the policy permits.
    By default, only administrators can get this parameter.
  in: body
  required: false
  type: string
  min_version: 2.16
host_status_body:
  description: |
    The status of the current host, either ``enabled`` or ``disabled``.
  in: body
  required: false
  type: string
host_status_body_in:
  description: |
    The status of the host, either ``enable`` or ``disable``.
  in: body
  required: false
  type: string
host_status_update_rebuild:
  description: |
    The host status. Values where next value in list can override the previous:

    - ``UP`` if nova-compute up.
    - ``UNKNOWN`` if nova-compute not reported by servicegroup driver.
    - ``DOWN`` if nova-compute forced down.
    - ``MAINTENANCE`` if nova-compute is disabled.
    - Empty string indicates there is no host for server.

    This attribute appears in the response only if the policy permits.
    By default, only administrators can get this parameter.
  in: body
  required: false
  type: string
  min_version: 2.75
host_unshelve:
  description: |
    The destination host name. Specifying a destination host is by default only
    allowed to project_admin, if it not the case HTTP 403 forbidden response
    is returned.
  in: body
  required: false
  type: string
  min_version: 2.91
host_zone:
  description: |
    The available zone of the host.
  in: body
  required: true
  type: string
hostId:
  description: |
    An ID string representing the host. This is a hashed value so will not actually look like
    a hostname, and is hashed with data from the project_id, so the same physical host as seen
    by two different project_ids, will be different. It is useful when within the same project you
    need to determine if two instances are on the same or different physical hosts for the
    purposes of availability or performance.
  in: body
  required: true
  type: string
hosts:
  description: |
    An array of host information.
  in: body
  required: true
  type: array
hosts.availability_zone:
  description: |
    An object containing a list of host information. The host information is comprised
    of host and service objects. The service object returns three parameters representing
    the states of the service: ``active``, ``available``, and ``updated_at``.
  in: body
  required: true
  type: object
hosts.availability_zone_none:
  description: |
    It is always ``null``.
  in: body
  required: true
  type: none
hours:
  description: |
    The duration that the server exists (in hours).
  in: body
  required: true
  type: float
hours_optional:
  description: |
    The duration that the server exists (in hours).
  in: body
  required: false
  type: float
hypervisor:
  description: |
    The hypervisor object.
  in: body
  required: true
  type: object
hypervisor_count:
  description: |
    The number of hypervisors.
  in: body
  required: true
  type: integer
hypervisor_diagnostics:
  description: |
    The hypervisor on which the VM is running. Examples for libvirt driver
    may be: ``qemu``, ``kvm`` or ``xen``.
  in: body
  required: true
  type: string
  min_version: 2.48
hypervisor_free_disk_gb:
  description: |
    The free disk remaining on this hypervisor(in GiB). This does not take
    allocation ratios used for overcommit into account so this value may be
    negative.
  in: body
  required: true
  type: integer
  max_version: 2.87
hypervisor_free_disk_gb_total:
  description: |
    The free disk remaining on all hypervisors(in GiB). This does not take
    allocation ratios used for overcommit into account so this value may be
    negative.
  in: body
  required: true
  type: integer
hypervisor_hostname:
  description: |
    The hypervisor host name provided by the Nova virt driver. For the Ironic
    driver, it is the Ironic node uuid.
  in: body
  required: true
  type: string
hypervisor_id_body:
  description: |
    The id of the hypervisor.
  in: body
  required: true
  type: integer
  max_version: 2.52
hypervisor_id_body_no_version:
  description: |
    The id of the hypervisor.
  in: body
  required: true
  type: integer
hypervisor_id_body_uuid:
  description: |
    The id of the hypervisor as a UUID.
  in: body
  required: true
  type: string
  min_version: 2.53
hypervisor_links:
  description: |
    Links to the hypervisors resource. See `API Guide / Links and
    References
    <https://docs.openstack.org/api-guide/compute/links_and_references.html>`_
    for more info.
  in: body
  type: array
  min_version: 2.33
  required: false
hypervisor_os_diagnostics:
  description: |
    The hypervisor OS.
  in: body
  type: string
  required: true
  min_version: 2.48
hypervisor_servers:
  description: |
    A list of ``server`` objects.
    This field has become mandatory in microversion 2.75. If no servers is on hypervisor
    then empty list is returned.
  in: body
  required: true
  type: array
  min_version: 2.53
hypervisor_servers_name:
  description: |
    The server name.
  in: body
  required: false
  type: string
  min_version: 2.53
hypervisor_servers_uuid:
  description: |
    The server ID.
  in: body
  required: false
  type: string
  min_version: 2.53
hypervisor_service:
  description: |
    The hypervisor service object.
  in: body
  required: true
  type: object
hypervisor_state:
  description: |
    The state of the hypervisor. One of ``up`` or ``down``.
  in: body
  required: true
  type: string
hypervisor_statistics:
  description: |
    The hypervisors statistics summary object.
  in: body
  required: true
  type: object
hypervisor_status:
  description: |
    The status of the hypervisor. One of ``enabled`` or ``disabled``.
  in: body
  required: true
  type: string
hypervisor_type:
  in: body
  required: true
  type: string
  description: |
    The hypervisor type for the agent. Currently only ``xen`` is supported.
hypervisor_type_body:
  description: |
    The hypervisor type.
  in: body
  required: true
  type: string
hypervisor_uptime:
  description: |
    The total uptime of the hypervisor and information about average load. Only
    reported for active hosts where the virt driver supports this feature.
  in: body
  required: true
  type: string
  min_version: 2.88
hypervisor_vcpus:
  description: |
    The number of vCPU in this hypervisor. This does not take allocation
    ratios used for overcommit into account so there may be disparity between
    this and the used count.
  in: body
  required: true
  type: integer
  max_version: 2.87
hypervisor_vcpus_total:
  description: |
    The number of vCPU on all hypervisors. This does not take allocation
    ratios used for overcommit into account so there may be disparity between
    this and the used count.
  in: body
  required: true
  type: integer
hypervisor_vcpus_used:
  description: |
    The number of vCPU used in this hypervisor.
  in: body
  required: true
  type: integer
  max_version: 2.87
hypervisor_vcpus_used_total:
  description: |
    The number of vCPU used on all hypervisors.
  in: body
  required: true
  type: integer
hypervisor_version:
  description: |
    The hypervisor version.
  in: body
  required: true
  type: integer
hypervisors:
  description: |
    An array of hypervisor information.
  in: body
  required: true
  type: array
image:
  description: |
    The UUID and links for the image for your server instance. The ``image`` object
    will be an empty string when you boot the server from a volume.
  in: body
  required: true
  type: object
image_id_body:
  description: |
    The ID of the Image.
  in: body
  required: true
  type: string
image_metadata:
  description: |
    Metadata key and value pairs for the image.
    The maximum size for each metadata key and value pair is 255 bytes.
  in: body
  required: false
  type: object
image_metadata_items:
  description: |
    The number of allowed metadata items for each image. Starting from
    version 2.39 this field is dropped from 'os-limits' response, because
    'image-metadata' proxy API was deprecated.
  in: body
  required: true
  type: integer
  max_version: 2.38
image_name:
  description: |
    The display name of an Image.
  in: body
  required: true
  type: string
image_progress:
  description: |
    A percentage value of the image save progress. This can be one of:

    - ``ACTIVE``: 100
    - ``SAVING``: 25 or 50
  in: body
  required: true
  type: integer
image_properties:
  description: |
    The image properties key/value pairs.
  in: body
  required: true
  type: object
  min_version: 2.98
image_server:
  description: |
    The server booted from image.
  in: body
  required: false
  type: object
image_size:
  description: |
    The size of the image.
  in: body
  required: true
  type: integer
image_status:
  description: |
    The status of image, as a string. This can be one of:

    - ``ACTIVE``: image is in active state
    - ``SAVING``: image is in queued or in saving process
    - ``DELETED``: image is deleted or in progress of deletion
    - ``ERROR``: image is in error state
    - ``UNKNOWN``: image is in unknown state
  in: body
  required: true
  type: string
imageRef:
  description: |
    The UUID of the image to use for your server instance.
    This is not required in case of boot from volume.
    In all other cases it is required and must be a valid UUID
    otherwise API will return 400.
  in: body
  required: false
  type: string
imageRef_rebuild:
  description: |
    The UUID of the image to rebuild for your server instance.  It
    must be a valid UUID otherwise API will return 400.  To rebuild a
    volume-backed server with a new image, at least microversion 2.93
    needs to be provided in the request else the request will fall
    back to old behaviour i.e. the API will return 400 (for an image
    different from the image used when creating the volume).  For
    non-volume-backed servers, specifying a new image will result in
    validating that the image is acceptable for the current compute
    host on which the server exists. If the new image is not valid,
    the server will go into ``ERROR`` status.
  in: body
  required: true
  type: string
images:
  description: |
    An array of Image objects.
  in: body
  required: true
  type: array
injected_file_content_bytes:
  description: |
    The number of allowed bytes of content for each injected file.
  in: body
  required: true
  type: integer
  max_version: 2.56
injected_file_content_bytes_quota_details:
  description: |
    The object of detailed injected file content bytes quota,
    including in_use, limit and reserved number of injected
    file content bytes.
  in: body
  required: true
  type: object
  max_version: 2.56
injected_file_content_bytes_quota_optional:
  description: |
    The number of allowed bytes of content for each injected file.
  in: body
  required: false
  type: integer
  max_version: 2.56
injected_file_path_bytes:
  description: |
    The number of allowed bytes for each injected file path.
  in: body
  required: true
  type: integer
  max_version: 2.56
injected_file_path_bytes_quota_details:
  description: |
    The object of detailed injected file path bytes quota,
    including in_use, limit and reserved number of injected
    file path bytes.
  in: body
  required: true
  type: object
  max_version: 2.56
injected_file_path_bytes_quota_optional:
  description: |
    The number of allowed bytes for each injected file path.
  in: body
  required: false
  type: integer
  max_version: 2.56
injected_files: &injected_files
  description: |
    The number of allowed injected files for each tenant.
  in: body
  required: true
  type: integer
  max_version: 2.56
injected_files_quota_class: &injected_files_quota_class
  <<: *injected_files
  description: |
    The number of allowed injected files for the quota class.
injected_files_quota_class_optional:
  <<: *injected_files_quota_class
  required: false
injected_files_quota_details:
  description: |
    The object of detailed injected files quota, including in_use, limit and
    reserved number of injected files.
  in: body
  required: true
  type: object
  max_version: 2.56
injected_files_quota_optional:
  description: |
    The number of allowed injected files for each tenant.
  in: body
  required: false
  type: integer
  max_version: 2.56
injectNetworkInfo:
  description: |
    The action.
  in: body
  required: true
  type: none
instance_action_events_2_50:
  description: |
    The events which occurred in this action in descending order of creation.

    Policy defaults enable only users with the administrative role to see
    instance action event information. Cloud providers can change these
    permissions through the ``policy.json`` file.
  in: body
  required: false
  type: array
  max_version: 2.50
instance_action_events_2_51:
  description: |
    The events which occurred in this action in descending order of creation.

    Policy defaults enable only users with the administrative role or the owner
    of the server to see instance action event information. Cloud providers can
    change these permissions through the ``policy.json`` file.
  in: body
  required: true
  type: array
  min_version: 2.51
instance_actions_next_links:
  description: |
    Links pertaining to the instance action.
    This parameter is returned when paging and more data is available.
    See `Paginated collections
    <https://docs.openstack.org/api-guide/compute/paginated_collections.html>`__
    for more info.
  in: body
  required: false
  type: array
  min_version: 2.58
instance_id_body:
  description: |
    The UUID of the server.
  in: body
  required: true
  type: string
instance_id_cloudpipe:
  description: |
    The UUID of the cloudpipe instance.
  in: body
  required: true
  type: string
instance_name:
  description: |
    The name of the instance.
  in: body
  required: true
  type: string
instance_usage_audit_log:
  description: |
    The object of instance usage audit logs.
  in: body
  required: true
  type: object
instance_usage_audit_log_message:
  description: |
    The log message of the instance usage audit task.
  in: body
  required: true
  type: string
instance_usage_audit_logs:
  description: |
    The object of instance usage audit log information.
  in: body
  required: true
  type: object
instance_usage_audit_task_state:
  description: |
    The state of the instance usage audit task.
    ``DONE`` or ``RUNNING``.
  in: body
  required: true
  type: string
instanceAction:
  description: |
    The instance action object.
  in: body
  required: true
  type: object
instanceActions:
  description: |
    List of the actions for the given instance in descending order of creation.
  in: body
  required: true
  type: array
instances: &instances
  description: |
    The number of allowed servers for each tenant.
  in: body
  required: true
  type: integer
instances_quota_class: &instances_quota_class
  <<: *instances
  description: |
    The number of allowed servers for the quota class.
instances_quota_class_optional:
  <<: *instances_quota_class
  required: false
instances_quota_details:
  description: |
    The object of detailed servers quota, including in_use, limit and
    reserved number of instances.
  in: body
  required: true
  type: object
instances_quota_optional:
  description: |
    The number of allowed servers for each tenant.
  in: body
  required: false
  type: integer
instances_usage_audit:
  description: |
    The number of instances.
  in: body
  required: true
  type: integer
interfaceAttachment:
  description: |
    Specify the ``interfaceAttachment`` action in the request body.
  in: body
  required: true
  type: string
interfaceAttachment_resp:
  description: |
    The interface attachment.
  in: body
  required: true
  type: object
interfaceAttachments:
  description: |
    List of the interface attachments.
  in: body
  required: true
  type: array
internal_access_path:
  description: |
    The id representing the internal access path.
  in: body
  required: false
  type: string
ip_address:
  description: |
    The IP address.
  in: body
  required: true
  type: string
ip_address_req:
  description: |
    The IP address. It is required when ``fixed_ips`` is specified.
  in: body
  required: true
  type: string
ip_host:
  description: |
    The name or ID of the host associated to the IP.
  in: body
  required: true
  type: string
ip_protocol:
  description: |
    The IP protocol. A valid value is ICMP, TCP, or UDP.
  in: body
  required: true
  type: string
ip_range:
  description: |
    The range of IP addresses to use for creating floating IPs.
  in: body
  required: true
  type: string
ip_range_delete:
  description: |
    The range of IP addresses from which to bulk-delete floating IPs.
  in: body
  required: true
  type: string
key_name:
  description: |
    Key pair name.

    .. note:: The ``null`` value was allowed in the Nova legacy v2 API,
              but due to strict input validation, it is not allowed in
              the Nova v2.1 API.
  in: body
  required: false
  type: string
key_name_rebuild_req:
  description: |
    Key pair name for rebuild API. If ``null`` is specified,
    the existing keypair is unset.

    .. note:: Users within the same project are able to rebuild other
              user's instances in that project with a new keypair. Keys
              are owned by users (which is the only resource that's true
              of). Servers are owned by projects. Because of this a rebuild
              with a key_name is looking up the keypair by the user calling
              rebuild.
  in: body
  required: false
  type: string
  min_version: 2.54
key_name_rebuild_resp:
  description: |
    The name of associated key pair, if any.
  in: body
  required: true
  type: string
  min_version: 2.54
key_name_resp:
  description: |
    The name of associated key pair, if any.
  in: body
  required: true
  type: string
key_name_resp_update:
  description: |
    The name of associated key pair, if any.
  in: body
  required: true
  type: string
  min_version: 2.75
key_pairs: &key_pairs
  description: |
    The number of allowed key pairs for each user.
  in: body
  required: true
  type: integer
key_pairs_quota_class: &key_pairs_quota_class
  <<: *key_pairs
  description: |
    The number of allowed key pairs for the quota class.
key_pairs_quota_class_optional:
  <<: *key_pairs_quota_class
  required: false
key_pairs_quota_details:
  description: |
    The object of detailed key pairs quota, including in_use, limit and
    reserved number of key pairs.

    .. note:: ``in_use`` field value for keypair quota details is always
      zero. In Nova, key_pairs are a user-level resource, not a project-
      level resource, so for legacy reasons, the keypair in-use information
      is not counted.
  in: body
  required: true
  type: object
key_pairs_quota_optional:
  description: |
    The number of allowed key pairs for each user.
  in: body
  required: false
  type: integer
keypair:
  in: body
  type: object
  required: true
  description: |
    Keypair object
keypair_deleted:
  description: |
    A boolean indicates whether this keypair is deleted or not.
    The value is always ``false`` (not deleted).
  in: body
  required: true
  type: boolean
keypair_fingerprint:
  in: body
  required: true
  type: string
  description: |
    The fingerprint for the keypair.
keypair_id:
  description: |
    The keypair ID.
  in: body
  required: true
  type: integer
keypair_links:
  description: |
    Links pertaining to keypair. See `API Guide / Links and
    References
    <https://docs.openstack.org/api-guide/compute/links_and_references.html>`_
    for more info.
  in: body
  type: array
  required: false
  min_version: 2.35
keypair_name:
  in: body
  required: true
  type: string
  description: |
    The name for the keypair.
keypair_name_in:
  in: body
  required: true
  type: string
  description: |
    A name for the keypair which will be used to reference it later.

    .. note::

      Since microversion 2.92, allowed characters are ASCII letters
      ``[a-zA-Z]``, digits ``[0-9]`` and the following special
      characters: ``[@._- ]``.
keypair_private_key:
  description: |
    If you do not provide a public key on create, a new keypair will
    be built for you, and the private key will be returned during the
    initial create call. Make sure to save this, as there is no way to
    get this private key again in the future.
  in: body
  required: false
  type: string
  max_version: 2.91
keypair_public_key:
  description: |
    The keypair public key.
  in: body
  required: true
  type: string
keypair_public_key_in:
  description: |
    The public ssh key to import.
    Was optional before microversion 2.92 : if you were omitting this value, a
    keypair was generated for you.
  in: body
  required: true
  type: string
keypair_type:
  in: body
  required: true
  type: string
  description: |
    The type of the keypair. Allowed values are ``ssh`` or ``x509``.
  min_version: 2.2
keypair_type_in:
  in: body
  required: false
  type: string
  description: |
    The type of the keypair. Allowed values are ``ssh`` or ``x509``.
  min_version: 2.2
keypair_updated_deleted_at:
  description: |
    It is always ``null``.
  in: body
  required: true
  type: none
# NOTE(mriedem): This is the user_id description for the keypair create/show
# response which has always been returned.
keypair_userid:
  in: body
  required: true
  type: string
  description: |
    The user_id for a keypair.
keypair_userid_in:
  in: body
  required: false
  type: string
  description: |
    The user_id for a keypair. This allows administrative users to
    upload keys for other users than themselves.
  min_version: 2.10
keypairs:
  in: body
  type: array
  required: true
  description: |
    Array of Keypair objects
length:
  description: |
    The number of lines to fetch from the end of console log. All
    lines will be returned if this is not specified.

    .. note::

      This parameter can be specified as not only 'integer' but also 'string'.

  in: body
  required: false
  type: integer
limits:
  description: |
    Data structure that contains both absolute limits within a deployment.
  in: body
  required: true
  type: object
limits_absolutes:
  description: |
    Name/value pairs that set quota limits within a deployment and
    Name/value pairs of resource usage.
  in: body
  required: true
  type: object
limits_rate_uri:
  description: |
    A human readable URI that is used as a friendly description of where the api rate limit is applied.
  in: body
  required: true
  type: string
limits_rates:
  description: |
    An empty list for backwards compatibility purposes.
  in: body
  required: true
  type: array
links:
  description: |
    Links to the resources in question. See `API Guide / Links and
    References
    <https://docs.openstack.org/api-guide/compute/links_and_references.html>`_
    for more info.
  in: body
  required: true
  type: array
local_gb:
  description: |
    The disk in this hypervisor (in GiB). This does not take allocation
    ratios used for overcommit into account so there may be disparity between
    this and the used count.
  in: body
  required: true
  type: integer
  max_version: 2.87
local_gb_simple_tenant_usage:
  description: |
    The sum of the root disk size of the server and
    the ephemeral disk size of it (in GiB).
  in: body
  required: true
  type: integer
local_gb_simple_tenant_usage_optional:
  description: |
    The sum of the root disk size of the server and
    the ephemeral disk size of it (in GiB).
  in: body
  required: false
  type: integer
local_gb_total:
  description: |
    The disk on all hypervisors (in GiB). This does not take allocation
    ratios used for overcommit into account so there may be disparity between
    this and the used count.
  in: body
  required: true
  type: integer
local_gb_used:
  description: |
    The disk used in this hypervisor (in GiB).
  in: body
  required: true
  type: integer
  max_version: 2.87
local_gb_used_total:
  description: |
    The disk used on all hypervisors (in GiB).
  in: body
  required: true
  type: integer
lock:
  description: |
    The action to lock a server.
    This parameter can be ``null``.
    Up to microversion 2.73, this parameter should be ``null``.
  in: body
  required: true
  type: object
locked:
  description: |
    True if the instance is locked otherwise False.
  in: body
  required: true
  type: boolean
  min_version: 2.9
locked_reason_req:
  description: |
    The reason behind locking a server. Limited to 255 characters in length.
  in: body
  required: false
  type: string
  min_version: 2.73
locked_reason_resp:
  description: |
    The reason behind locking a server.
  in: body
  required: true
  type: string
  min_version: 2.73
mac_addr:
  description: |
    The MAC address.
  in: body
  required: true
  type: string
mac_address:
  description: |
    The MAC address.
  in: body
  required: true
  type: string
md5hash:
  description: |
    The MD5 hash.
  in: body
  required: true
  type: string
media_types:
  description: |
    The `media types
    <https://www.iana.org/assignments/media-types/media-types.xhtml>`_.
    It is an array of a fixed dict.

    .. note::
      It is vestigial and provide no useful information.
      It will be deprecated and removed in the future.
  in: body
  required: true
  type: array
members:
  description: |
    A list of members in the server group.
  in: body
  required: true
  type: array
memory_details_diagnostics:
  description: |
    The dictionary with information about VM memory usage.
    Following fields are presented in the dictionary:

    - ``maximum`` - Amount of memory provisioned for the VM in MiB (Integer)

    - ``used`` - Amount of memory that is currently used by the guest operating
      system and its applications in MiB (Integer)
  in: body
  required: true
  type: array
  min_version: 2.48
memory_mb:
  description: |
    The memory of this hypervisor (in MiB). This does not take allocation
    ratios used for overcommit into account so there may be disparity between
    this and the used count.
  in: body
  required: true
  type: integer
  max_version: 2.87
memory_mb_simple_tenant_usage:
  description: |
    The memory size of the server (in MiB).
  in: body
  required: true
  type: integer
memory_mb_simple_tenant_usage_optional:
  description: |
    The memory size of the server (in MiB).
  in: body
  required: false
  type: integer
memory_mb_total:
  description: |
    The memory of all hypervisors (in MiB). This does not take allocation
    ratios used for overcommit into account so there may be disparity between
    this and the used count.
  in: body
  required: true
  type: integer
memory_mb_used:
  description: |
    The memory used in this hypervisor (in MiB).
  in: body
  required: true
  type: integer
  max_version: 2.87
memory_mb_used_total:
  description: |
    The memory used on all hypervisors(in MiB).
  in: body
  required: true
  type: integer
message:
  description: |
    The related error message for when an action fails.
  in: body
  required: true
  type: string
meta:
  description: |
    The object of detailed key metadata items.
  in: body
  required: true
  type: object
metadata:
  description: |
    Metadata key and value pairs. The maximum size of the metadata key and value is
    255 bytes each.
  in: body
  required: false
  type: object
metadata_compat:
  description: |
    A dictionary of metadata key-and-value pairs, which is maintained for backward
    compatibility.
  in: body
  required: true
  type: object
metadata_items:
  description: |
    The number of allowed metadata items for each server.
  in: body
  required: true
  type: integer
metadata_items_quota_details:
  description: |
    The object of detailed key metadata items quota, including in_use,
    limit and reserved number of metadata items.
  in: body
  required: true
  type: object
metadata_items_quota_optional:
  description: |
    The number of allowed metadata items for each server.
  in: body
  required: false
  type: integer
metadata_object:
  description: |
    Metadata key and value pairs. The maximum size for each metadata key and value
    pair is 255 bytes.
  in: body
  required: true
  type: object
metadata_server_group_max_2_63:
  description: |
    Metadata key and value pairs. The maximum size for each metadata key and value
    pair is 255 bytes. It's always empty and only used for keeping compatibility.
  in: body
  required: true
  type: object
  max_version: 2.63
migrate:
  description: |
    The action to cold migrate a server.
    This parameter can be ``null``.
    Up to microversion 2.55, this parameter should be ``null``.
  in: body
  required: true
  type: object
migrate_dest_compute:
  description: |
    The target compute for a migration.
  in: body
  required: true
  type: string
migrate_dest_host:
  description: |
    The target host for a migration.
  in: body
  required: true
  type: string
migrate_dest_node:
  description: |
    The target node for a migration.
  in: body
  required: true
  type: string
migrate_disk_processed_bytes:
  description: |
    The amount of disk, in bytes, that has been processed during the migration.
  in: body
  required: true
  type: integer
migrate_disk_remaining_bytes:
  description: |
    The amount of disk, in bytes, that still needs to be migrated.
  in: body
  required: true
  type: integer
migrate_disk_total_bytes:
  description: |
    The total amount of disk, in bytes, that needs to be migrated.
  in: body
  required: true
  type: integer
migrate_memory_processed_bytes:
  description: |
    The amount of memory, in bytes, that has been processed during the migration.
  in: body
  required: true
  type: integer
migrate_memory_remaining_bytes:
  description: |
    The amount of memory, in bytes, that still needs to be migrated.
  in: body
  required: true
  type: integer
migrate_memory_total_bytes:
  description: |
    The total amount of memory, in bytes, that needs to be migrated.
  in: body
  required: true
  type: integer
migrate_source_compute:
  description: |
    The source compute for a migration.
  in: body
  required: true
  type: string
migrate_source_node:
  description: |
    The source node for a migration.
  in: body
  required: true
  type: string
migrate_status:
  description: |
    The current status of the migration.
  in: body
  required: true
  type: string
migration:
  description: |
    The server migration object.
  in: body
  required: true
  type: object
migration_id:
  description: |
    The ID of the server migration.
  in: body
  required: true
  type: integer
migration_links_2_23:
  description: |
    Links to the migration.
    This parameter is returned if the migration type is ``live-migration`` and
    the migration status is one of ``queued``, ``preparing``, ``running``
    and ``post-migrating``. See `Paginated collections
    <https://docs.openstack.org/api-guide/compute/paginated_collections.html>`__
    for more info.
  in: body
  required: false
  type: array
  min_version: 2.23
migration_new_flavor_id:
  description: |
    In ``resize`` case, the flavor ID for resizing the server.
    In the other cases, this parameter is same as the flavor ID
    of the server when the migration was started.

    .. note:: This is an internal ID and is not exposed in any other API.
      In particular, this is not the ID specified or automatically generated
      during flavor creation or returned via the ``GET /flavors`` API.
  in: body
  required: true
  type: integer
migration_next_links_2_59:
  description: |
    Links pertaining to the migration.
    This parameter is returned when paging and more data is available.
    See `Paginated collections
    <https://docs.openstack.org/api-guide/compute/paginated_collections.html>`__
    for more info.
  in: body
  required: false
  type: array
  min_version: 2.59
migration_old_flavor_id:
  description: |
    The flavor ID of the server when the migration was started.

    .. note:: This is an internal ID and is not exposed in any other API.
      In particular, this is not the ID specified or automatically generated
      during flavor creation or returned via the ``GET /flavors`` API.
  in: body
  required: true
  type: integer
migration_type_2_23:
  description: |
    The type of the server migration. This is one of ``live-migration``,
    ``migration``, ``resize`` and ``evacuation``.
  in: body
  required: true
  type: string
  min_version: 2.23
migration_uuid:
  description: |
    The UUID of the migration.
  in: body
  required: true
  type: string
  min_version: 2.59
migrations:
  description: |
    The list of server migration objects.
  in: body
  required: true
  type: array
minDisk_body:
  description: |
    The minimum amount of disk space an image requires to boot, in GiB. For example, ``100``.
  in: body
  required: true
  type: integer
minRam_body:
  description: |
    The minimum amount of RAM an image requires to function, in MiB. For example, ``512``.
  in: body
  required: true
  type: integer
name:
  description: |
    The security group name.
  in: body
  required: true
  type: string
name_sec_group_optional:
  description: |
    The security group name.
  in: body
  required: false
  type: string
name_server_group:
  description: |
    The name of the server group.
  in: body
  required: true
  type: string
name_update_rebuild:
  description: |
    The security group name.
  in: body
  required: true
  type: string
  min_version: 2.75
namespace:
  description: |
    A URL pointing to the namespace for this extension.
  in: body
  required: true
  type: string
net_id:
  description: |
    The ID of the network for which you want to create a port interface.  The ``net_id``
    and ``port_id`` parameters are mutually exclusive.  If you do not specify the
    ``net_id`` parameter, the OpenStack Networking API v2.0 uses the network information
    cache that is associated with the instance.
  in: body
  required: false
  type: string
net_id_resp:
  description: |
    The network ID.
  in: body
  required: true
  type: string
net_id_resp_2_12:
  description: |
    The network ID.
  in: body
  required: true
  type: string
  min_version: 2.12
network_label_body:
  description: |
    List of IP address and IP version pairs.
    The ``network_label`` stands for the name of a network,
    such as ``public`` or ``private``.
  in: body
  required: true
  type: array
network_uuid:
  description: |
    To provision the server instance with a NIC for a network, specify the UUID of
    the network in the ``uuid`` attribute in a ``networks`` object. Required if you
    omit the ``port`` attribute.

    Starting with microversion 2.37, this value is strictly enforced to be in
    UUID format.
  in: body
  required: false
  type: string
networks:
  description: |
    A list of ``network`` object. Required parameter when there are multiple
    networks defined for the tenant. When you do not specify the networks
    parameter, the server attaches to the only network created for the
    current tenant.  Optionally, you can create one or more NICs on the server.
    To provision the server instance with a NIC for a network, specify
    the UUID of the network in the ``uuid`` attribute in a ``networks``
    object.  To provision the server instance with a NIC for an already
    existing port, specify the port-id in the ``port`` attribute in a
    ``networks`` object.

    If multiple networks are defined, the order in which they appear in the
    guest operating system will not necessarily reflect the order in which they
    are given in the server boot request. Guests should therefore not depend
    on device order to deduce any information about their network devices.
    Instead, device role tags should be used: introduced in 2.32, broken in
    2.37, and re-introduced and fixed in 2.42, the ``tag`` is an optional,
    string attribute that can be used to assign a tag to a virtual network
    interface. This tag is then exposed to the guest in the metadata API and
    the config drive and is associated to hardware metadata for that network
    interface, such as bus (ex: PCI), bus address (ex: 0000:00:02.0), and MAC
    address.

    A bug has caused the ``tag`` attribute to no longer be accepted starting
    with version 2.37. Therefore, network interfaces could only be tagged in
    versions 2.32 to 2.36 inclusively. Version 2.42 has restored the ``tag``
    attribute.

    Starting with microversion 2.37, this field is required and the special
    string values *auto* and *none* can be specified for networks. *auto*
    tells the Compute service to use a network that is available to the
    project, if one exists. If one does not exist, the Compute service will
    attempt to automatically allocate a network for the project (if possible).
    *none* tells the Compute service to not allocate a network for the
    instance. The *auto* and *none* values cannot be used with any other
    network values, including other network uuids, ports, fixed IPs or device
    tags. These are requested as strings for the networks value, not in a
    list. See the associated example.
  in: body
  required: true
  type: array
networks_quota_optional: &networks_quota_optional
  description: |
    The number of private networks that can be created per project.
  in: body
  required: false
  type: integer
  max_version: 2.49
networks_quota_set_optional:
  <<: *networks_quota_optional
  max_version: 2.35
new_file:
  description: |
    The name of the qcow2 file that Block Storage creates, which becomes the active
    image for the VM.
  in: body
  required: true
  type: string
nic_details_diagnostics:
  description: |
    The list of dictionaries with detailed information about VM NICs.
    Following fields are presented in each dictionary:

    - ``mac_address`` - Mac address of the interface (String)

    - ``rx_octets`` - Received octets (Integer)

    - ``rx_errors`` - Received errors (Integer)

    - ``rx_drop`` - Received packets dropped (Integer)

    - ``rx_packets`` - Received packets (Integer)

    - ``rx_rate`` - Receive rate in bytes (Integer)

    - ``tx_octets`` - Transmitted Octets (Integer)

    - ``tx_errors`` - Transmit errors (Integer)

    - ``tx_drop`` - Transmit dropped packets (Integer)

    - ``tx_packets`` - Transmit packets (Integer)

    - ``tx_rate`` - Transmit rate in bytes (Integer)
  in: body
  required: true
  type: array
  min_version: 2.48
no_device:
  description: |
    It is no device if ``True``.
  in: body
  required: false
  type: boolean
num_cpus_diagnostics:
  description: |
    The number of vCPUs.
  in: body
  required: true
  type: integer
  min_version: 2.48
num_disks_diagnostics:
  description: |
    The number of disks.
  in: body
  required: true
  type: integer
  min_version: 2.48
num_nics_diagnostics:
  description: |
    The number of vNICs.
  in: body
  required: true
  type: integer
  min_version: 2.48
on_shared_storage:
  description: |
    Server on shared storage.

    .. note::

      Starting since version 2.14, Nova automatically detects
      whether the server is on shared storage or not.
      Therefore this parameter was removed.
  in: body
  required: true
  type: boolean
  max_version: 2.13
os:
  description: |
    The name of the operating system.
  in: body
  required: true
  type: string
os-availability-zone:availability_zone:
  description: |
    The availability zone from which to launch the server. When you
    provision resources, you specify from which availability zone you
    want your instance to be built.  Typically, an admin user will use
    availability zones to arrange OpenStack compute hosts into logical
    groups.

    An availability zone provides a form of physical isolation and redundancy from
    other availability zones. For instance, if some racks in your data center are
    on a separate power source, you can put servers in those racks in their own availability
    zone. Availability zones can also help separate different classes of hardware.  By
    segregating resources into availability zones, you can ensure that your application
    resources are spread across disparate machines to achieve high availability in
    the event of hardware or other failure. See
    `Availability Zones (AZs) <https://docs.openstack.org/nova/latest/user/aggregates.html#availability-zones-azs>`_ for more information.

    You can list the available availability zones by calling the
    :ref:`os-availability-zone` API, but you should avoid using the `default
    availability zone <https://docs.openstack.org/nova/latest/configuration/config.html#DEFAULT.default_availability_zone>`_
    when creating the server.  The default availability zone is named ``nova``.
    This AZ is only shown when listing the availability zones as an admin.
  in: body
  required: false
  type: string
OS-DCF:diskConfig:
  description: |
    Controls how the API partitions the disk when you create, rebuild, or resize servers.
    A server inherits the ``OS-DCF:diskConfig`` value from the image from which it
    was created, and an image inherits the ``OS-DCF:diskConfig`` value from the server
    from which it was created. To override the inherited setting, you can include
    this attribute in the request body of a server create, rebuild, or resize request.  If
    the ``OS-DCF:diskConfig`` value for an image is ``MANUAL``, you cannot create
    a server from that image and set its ``OS-DCF:diskConfig`` value to ``AUTO``.
    A valid value is:

    - ``AUTO``. The API builds the server with a single partition the size of the
      target flavor disk. The API automatically adjusts the file system to fit the
      entire partition.

    - ``MANUAL``. The API builds the server by using whatever partition scheme and
      file system is in the source image. If the target flavor disk is larger, the API
      does not partition the remaining disk space.
  in: body
  required: false
  type: string
OS-EXT-AZ:availability_zone:
  description: |
    The availability zone name.
  in: body
  required: true
  type: string
OS-EXT-AZ:availability_zone_optional:
  description: |
    The availability zone name.
  in: body
  required: false
  type: string
OS-EXT-AZ:availability_zone_update_rebuild:
  description: |
    The availability zone name.
  in: body
  required: true
  type: string
  min_version: 2.75
OS-EXT-SRV-ATTR:host:
  description: |
    The name of the compute host on which this instance is running.
    Appears in the response for administrative users only.
  in: body
  required: true
  type: string
OS-EXT-SRV-ATTR:host_update_rebuild:
  description: |
    The name of the compute host on which this instance is running.
    Appears in the response for administrative users only.
  in: body
  required: true
  type: string
  min_version: 2.75
OS-EXT-SRV-ATTR:hypervisor_hostname:
  description: |
    The hypervisor host name provided by the Nova virt driver. For the Ironic driver,
    it is the Ironic node uuid. Appears in the response for administrative users only.
  in: body
  required: true
  type: string
OS-EXT-SRV-ATTR:hypervisor_hostname_update_rebuild:
  description: |
    The hypervisor host name provided by the Nova virt driver. For the Ironic driver,
    it is the Ironic node uuid. Appears in the response for administrative users only.
  in: body
  required: true
  type: string
  min_version: 2.75
OS-EXT-SRV-ATTR:instance_name:
  description: |
    The instance name. The Compute API generates the instance name from the instance
    name template. Appears in the response for administrative users only.
  in: body
  required: true
  type: string
OS-EXT-SRV-ATTR:instance_name_update_rebuild:
  description: |
    The instance name. The Compute API generates the instance name from the instance
    name template. Appears in the response for administrative users only.
  in: body
  required: true
  type: string
  min_version: 2.75
OS-EXT-STS:power_state:
  description: |
    The power state of the instance. This is an enum value that is mapped as::

      0: NOSTATE
      1: RUNNING
      3: PAUSED
      4: SHUTDOWN
      6: CRASHED
      7: SUSPENDED
  in: body
  required: true
  type: integer
OS-EXT-STS:power_state_update_rebuild:
  description: |
    The power state of the instance. This is an enum value that is mapped as::

      0: NOSTATE
      1: RUNNING
      3: PAUSED
      4: SHUTDOWN
      6: CRASHED
      7: SUSPENDED
  in: body
  required: true
  type: integer
  min_version: 2.75
OS-EXT-STS:task_state:
  description: |
    The task state of the instance.
  in: body
  required: true
  type: string
OS-EXT-STS:task_state_update_rebuild:
  description: |
    The task state of the instance.
  in: body
  required: true
  type: string
  min_version: 2.75
OS-EXT-STS:vm_state:
  description: |
    The VM state.
  in: body
  required: true
  type: string
OS-EXT-STS:vm_state_update_rebuild:
  description: |
    The VM state.
  in: body
  required: true
  type: string
  min_version: 2.75
os-extended-volumes:volumes_attached:
  description: |
    The attached volumes, if any.
  in: body
  required: true
  type: array
os-extended-volumes:volumes_attached.delete_on_termination:
  description: |
    A flag indicating if the attached volume will be deleted
    when the server is deleted. By default this is False.
  in: body
  required: true
  type: boolean
  min_version: 2.3
os-extended-volumes:volumes_attached.delete_on_termination_update_rebuild:
  description: |
    A flag indicating if the attached volume will be deleted
    when the server is deleted. By default this is False.
  in: body
  required: true
  type: boolean
  min_version: 2.75
os-extended-volumes:volumes_attached.id:
  description: |
    The attached volume ID.
  in: body
  required: true
  type: string
os-extended-volumes:volumes_attached.id_update_rebuild:
  description: |
    The attached volume ID.
  in: body
  required: true
  type: string
  min_version: 2.75
os-extended-volumes:volumes_attached_update_rebuild:
  description: |
    The attached volumes, if any.
  in: body
  required: true
  type: array
  min_version: 2.75
os-getConsoleOutput:
  description: |
    The action to get console output of the server.
  in: body
  required: true
  type: object
os-getRDPConsole:
  description: |
    The action.
  in: body
  required: true
  type: object
os-getRDPConsole-type:
  description: |
    The type of RDP console. The only valid value is ``rdp-html5``.
  in: body
  required: true
  type: string
os-getRDPConsole-url:
  description: |
    The URL used to connect to the RDP console.
  in: body
  required: true
  type: string
os-getSerialConsole:
  description: |
    The action.
  in: body
  required: true
  type: object
os-getSerialConsole-type:
  description: |
    The type of serial console. The only valid value is ``serial``.
  in: body
  required: true
  type: string
os-getSerialConsole-url:
  description: |
    The URL used to connect to the Serial console.
  in: body
  required: true
  type: string
os-getSPICEConsole:
  description: |
    The action.
  in: body
  required: true
  type: object
os-getSPICEConsole-type:
  description: |
    The type of SPICE console. The only valid value is ``spice-html5``.
  in: body
  required: true
  type: string
os-getSPICEConsole-url:
  description: |
    The URL used to connect to the SPICE console.
  in: body
  required: true
  type: string
os-getVNCConsole:
  description: |
    The action.
  in: body
  required: true
  type: object
os-getVNCConsole-type:
  description: |
    The type of VNC console. The only valid value is ``novnc``.
  in: body
  required: true
  type: string
os-getVNCConsole-url:
  description: |
    The URL used to connect to the VNC console.
  in: body
  required: true
  type: string
os-migrateLive:
  description: |
    The action.
  in: body
  required: true
  type: object
os-resetState:
  description: |
    The action.
  in: body
  required: true
  type: object
os-resetState_state:
  description: |
    The state of the server to be set, ``active`` or ``error`` are valid.
  in: body
  required: true
  type: string
OS-SRV-USG:launched_at:
  description: |
    The date and time when the server was launched.

    The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:

    ::

      CCYY-MM-DDThh:mm:ss±hh:mm

    For example, ``2015-08-27T09:49:58-05:00``.

    The ``hh±:mm`` value, if included, is the time zone as an offset from UTC.
    If the ``deleted_at`` date and time stamp is not set, its value is ``null``.
  in: body
  required: true
  type: string
OS-SRV-USG:launched_at_update_rebuild:
  description: |
    The date and time when the server was launched.

    The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:

    ::

      CCYY-MM-DDThh:mm:ss±hh:mm

    For example, ``2015-08-27T09:49:58-05:00``.

    The ``hh±:mm`` value, if included, is the time zone as an offset from UTC.
    If the ``deleted_at`` date and time stamp is not set, its value is ``null``.
  in: body
  required: true
  type: string
  min_version: 2.75
OS-SRV-USG:terminated_at:
  description: |
    The date and time when the server was deleted.

    The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:

    ::

      CCYY-MM-DDThh:mm:ss±hh:mm

    For example, ``2015-08-27T09:49:58-05:00``.
    The ``±hh:mm`` value, if included, is the time zone as an offset from UTC.
    If the ``deleted_at`` date and time stamp is not set, its value is ``null``.
  in: body
  required: true
  type: string
OS-SRV-USG:terminated_at_update_rebuild:
  description: |
    The date and time when the server was deleted.

    The date and time stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_:

    ::

      CCYY-MM-DDThh:mm:ss±hh:mm

    For example, ``2015-08-27T09:49:58-05:00``.
    The ``±hh:mm`` value, if included, is the time zone as an offset from UTC.
    If the ``deleted_at`` date and time stamp is not set, its value is ``null``.
  in: body
  required: true
  type: string
  min_version: 2.75
os-start:
  description: |
    The action to start a stopped server.
  in: body
  required: true
  type: none
os-stop:
  description: |
    The action to stop a running server.
  in: body
  required: true
  type: none
os:scheduler_hints:
  description: |
    The dictionary of data to send to the scheduler. Alternatively, you can specify
    ``OS-SCH-HNT:scheduler_hints`` as the key in the request body.

    .. note:: This is a top-level key in the request body, not part of the
      `server` portion of the request body.

    There are a few caveats with scheduler hints:

    * The request validation schema is per hint. For example, some require a
      single string value, and some accept a list of values.
    * Hints are only used based on the cloud scheduler configuration, which
      varies per deployment.
    * Hints are pluggable per deployment, meaning that a cloud can have custom
      hints which may not be available in another cloud.

    For these reasons, it is important to consult each cloud's user
    documentation to know what is available for scheduler hints.
  in: body
  required: false
  type: object
os:scheduler_hints_build_near_host_ip:
  description: |
    Schedule the server on a host in the network specified with this parameter
    and a cidr (``os:scheduler_hints.cidr``).
    It is available when ``SimpleCIDRAffinityFilter`` is available
    on cloud side.
  in: body
  required: false
  type: string
os:scheduler_hints_cidr:
  description: |
    Schedule the server on a host in the network specified with an IP address
    (``os:scheduler_hints:build_near_host_ip``) and this parameter.
    If ``os:scheduler_hints:build_near_host_ip`` is specified and
    this parameter is omitted, ``/24`` is used.
    It is available when ``SimpleCIDRAffinityFilter`` is available
    on cloud side.
  in: body
  required: false
  type: string
os:scheduler_hints_different_cell:
  description: |
    A list of cell routes or a cell route (string).
    Schedule the server in a cell that is not specified.
    It is available when ``DifferentCellFilter`` is available on cloud side
    that is cell v1 environment.
  in: body
  required: false
  type: array
os:scheduler_hints_different_host:
  description: |
    A list of server UUIDs or a server UUID.
    Schedule the server on a different host from a set of servers.
    It is available when ``DifferentHostFilter`` is available on cloud side.
  in: body
  required: false
  type: array
os:scheduler_hints_group:
  description: |
    The server group UUID. Schedule the server according to a policy of
    the server group (``anti-affinity``, ``affinity``, ``soft-anti-affinity``
    or ``soft-affinity``).
    It is available when ``ServerGroupAffinityFilter``,
    ``ServerGroupAntiAffinityFilter``, ``ServerGroupSoftAntiAffinityWeigher``,
    ``ServerGroupSoftAffinityWeigher`` are available on cloud side.
  in: body
  required: false
  type: string
os:scheduler_hints_query:
  description: |
    Schedule the server by using a custom filter in JSON format.
    For example::

      "query": "[\">=\",\"$free_ram_mb\",1024]"

    It is available when ``JsonFilter`` is available on cloud side.
  in: body
  required: false
  type: string
os:scheduler_hints_same_host:
  description: |
    A list of server UUIDs or a server UUID.
    Schedule the server on the same host as another server in a set of
    servers.
    It is available when ``SameHostFilter`` is available on cloud side.
  in: body
  required: false
  type: array
os:scheduler_hints_target_cell:
  description: |
    A target cell name. Schedule the server in a host in the cell specified.
    It is available when ``TargetCellFilter`` is available on cloud side
    that is cell v1 environment.
  in: body
  required: false
  type: string
overall_status:
  description: |
    The overall status of instance audit tasks.

    ::

      M of N hosts done. K errors.

    The ``M`` value is the number of hosts whose instance audit tasks have
    been done in the period. The ``N`` value is the number of all hosts.
    The ``K`` value is the number of hosts whose instance audit tasks
    cause errors. If instance audit tasks have been done at all hosts
    in the period, the overall status is as follows:

    ::

      ALL hosts done. K errors.

  in: body
  required: true
  type: string
para:
  description: |
    The parameter object.
  in: body
  required: true
  type: object
parent_group_id:
  description: |
    Security group ID.
  in: body
  required: true
  type: string
password:
  description: |
    The password returned from metadata server.
  in: body
  required: false
  type: string
path:
  description: |
    The path field in the personality object.
  in: body
  required: true
  type: string
  max_version: 2.56
pause:
  description: |
    The action to pause a server.
  in: body
  required: true
  type: none
period_beginning:
  description: |
    The beginning time of the instance usage audit period.
    For example, ``2016-05-01 00:00:00``.
  in: body
  required: true
  type: string
period_ending:
  description: |
    The ending time of the instance usage audit period.
    For example, ``2016-06-01 00:00:00``.
  in: body
  required: true
  type: string
personality:
  description: |
    The file path and contents, text only, to inject into the server at launch. The
    maximum size of the file path data is 255 bytes. The maximum limit is the number
    of allowed bytes in the decoded, rather than encoded, data.
  in: body
  required: false
  type: array
  max_version: 2.56
pinned_availability_zone:
  description: |
    This is the availability zone requested during server creation.
    Also when cross_az_attach option is false and booting an instance from
    volume, the instance can be pinned to AZ and in that case, instance will
    be scheduled on host belonging to pinned AZ.
    Also when default_schedule_zone config option set to specific AZ, in that
    case, instance would be pinned to that specific AZ, and instance will be
    scheduled on host belonging to pinned AZ.
    In case of no pinned availability zone, this value is set to `null`.
  in: body
  type: string
  min_version: 2.96
policies:
  description: |
    A list of exactly one policy name to associate with the server group. The
    current valid policy names are:

    - ``anti-affinity`` - servers in this group must be scheduled to
      different hosts.
    - ``affinity`` - servers in this group must be scheduled to the same host.
    - ``soft-anti-affinity`` - servers in this group should be scheduled to
      different hosts if possible, but if not possible then they should still
      be scheduled instead of resulting in a build failure. This policy was
      added in microversion 2.15.
    - ``soft-affinity`` - servers in this group should be scheduled to the same
      host if possible, but if not possible then they should still be scheduled
      instead of resulting in a build failure. This policy was added in
      microversion 2.15.
  in: body
  required: true
  type: array
  max_version: 2.63
policy_name:
  description: |
    The ``policy`` field represents the name of the policy. The current
    valid policy names are:

    - ``anti-affinity`` - servers in this group must be scheduled to
      different hosts.
    - ``affinity`` - servers in this group must be scheduled to the same host.
    - ``soft-anti-affinity`` - servers in this group should be scheduled to
      different hosts if possible, but if not possible then they should still
      be scheduled instead of resulting in a build failure.
    - ``soft-affinity`` - servers in this group should be scheduled to the same
      host if possible, but if not possible then they should still be scheduled
      instead of resulting in a build failure.
  in: body
  required: true
  type: string
  min_version: 2.64
policy_rules:
  description: |
    The ``rules`` field, which is a dict, can be applied to the policy.
    Currently, only the ``max_server_per_host`` rule is supported for the
    ``anti-affinity`` policy. The ``max_server_per_host`` rule allows
    specifying how many members of the anti-affinity group can reside on the
    same compute host. If not specified, only one member from the same
    anti-affinity group can reside on a given host.
  in: body
  required: true
  type: object
  min_version: 2.64
policy_rules_optional:
  description: |
    The ``rules`` field, which is a dict, can be applied to the policy.
    Currently, only the ``max_server_per_host`` rule is supported for the
    ``anti-affinity`` policy. The ``max_server_per_host`` rule allows
    specifying how many members of the anti-affinity group can reside on the
    same compute host. If not specified, only one member from the same
    anti-affinity group can reside on a given host. Requesting policy rules
    with any other policy than ``anti-affinity`` will be 400.
  in: body
  required: false
  type: object
  min_version: 2.64
pool:
  description: |
    Pool from which to allocate the IP address. If you omit this parameter, the call
    allocates the floating IP address from the public pool.  If no floating IP addresses
    are available, the call returns the ``400`` response code with an informational
    message.  Policy defaults enable only users with the administrative role or the
    owner of the server to perform this operation. Cloud providers can change these
    permissions through the ``policy.json`` file.
  in: body
  required: false
  type: string
port:
  description: |
    To provision the server instance with a NIC for an already existing port,
    specify the port-id in the ``port`` attribute in a ``networks`` object.
    The port status must be ``DOWN``. Required if you omit the ``uuid``
    attribute. Requested security groups are not applied to pre-existing ports.
  in: body
  required: false
  type: string
port_id:
  description: |
    The ID of the port for which you want to create an interface.  The ``net_id``
    and ``port_id`` parameters are mutually exclusive.  If you do not specify the
    ``port_id`` parameter, the OpenStack Networking API v2.0 allocates a port and
    creates an interface for it on the network.
  in: body
  required: false
  type: string
port_id_resp:
  description: |
    The port ID.
  in: body
  required: true
  type: string
port_number:
  description: |
    The port number.
  in: body
  required: true
  type: integer
port_state:
  description: |
    The port state.
  in: body
  required: true
  type: string
preserve_ephemeral:
  description: |
    Indicates whether the server is rebuilt with the preservation of the ephemeral
    partition (``true``).

    .. note::

      This only works with baremetal servers provided by
      Ironic. Passing it to any other server instance results in a
      fault and will prevent the rebuild from happening.
  in: body
  required: false
  type: boolean
previous:
  description: |
    Moves to the previous metadata item.
  format: uri
  in: body
  required: false
  type: string
private_key:
  description: |
    The secret key.
  in: body
  required: true
  type: string
progress:
  description: |
    A percentage value of the operation progress.
    This parameter only appears when the server status is ``ACTIVE``,
    ``BUILD``, ``REBUILD``, ``RESIZE``, ``VERIFY_RESIZE`` or ``MIGRATING``.
  in: body
  required: false
  type: integer
project_id:
  description: |
    The UUID of the project. If omitted, the project ID defaults to the
    calling tenant.
  in: body
  required: false
  type: string
project_id_migration_2_80:
  description: |
    The ID of the project which initiated the server migration. The value
    may be ``null`` for older migration records.
  in: body
  required: true
  type: string
  min_version: 2.80
project_id_server:
  description: |
    The ID of the project that this server belongs to.
  in: body
  required: true
  type: string
project_id_server_action:
  description: |
    The ID of the project which initiated the server action.
  in: body
  required: true
  type: string
project_id_server_group:
  description: |
    The project ID who owns the server group.
  min_version: 2.13
  in: body
  required: true
  type: string
project_id_value:
  description: |
    The project id under which the bulk ip addresses are created
  in: body
  required: true
  type: string
quota_class_id_body:
  <<: *quota_class_id
  in: body
quota_class_set:
  description: |
    A ``quota_class_set`` object.
  in: body
  required: true
  type: object
quota_set:
  description: |
    A ``quota_set`` object.
  in: body
  required: true
  type: object
quota_tenant_or_user_id_body:
  description: |
    The UUID of the tenant/user the quotas listed for.
  in: body
  required: true
  type: string
ram: &ram
  description: |
    The amount of allowed server RAM, in MiB, for each tenant.
  in: body
  required: true
  type: integer
ram_quota_class: &ram_quota_class
  <<: *ram
  description: |
    The amount of allowed instance RAM, in MiB, for the quota class.
ram_quota_class_optional:
  <<: *ram_quota_class
  required: false
ram_quota_details:
  description: |
    The object of detailed key ram quota, including in_use,
    limit and reserved number of ram.
  in: body
  required: true
  type: object
ram_quota_optional:
  description: |
    The amount of allowed server RAM, in MiB, for each tenant.
  in: body
  required: false
  type: integer
reboot:
  description: |
    The action to reboot a server.
  in: body
  required: true
  type: object
reboot_type:
  description: |
    The type of the reboot action. The valid values are ``HARD`` and ``SOFT``.
    A ``SOFT`` reboot attempts a graceful shutdown and restart of the server.
    A ``HARD`` reboot attempts a forced shutdown and restart of the server.
    The ``HARD`` reboot corresponds to the power cycles of the server.
  in: body
  required: true
  type: string
rebuild:
  description: |
    The action to rebuild a server.
  in: body
  required: true
  type: object
remote_console:
  description: |
    The remote console object.
  in: body
  required: true
  type: object
remote_console_protocol:
  description: |
    The protocol of remote console. The valid values are ``vnc``, ``spice``,
    ``serial`` and ``mks``. The protocol ``mks`` is added since Microversion
    ``2.8``.
  in: body
  required: true
  type: string
remote_console_type:
  description: |
    The type of remote console. The valid values are ``novnc``,
    ``spice-html5``, ``spice-direct``, ``serial``, and ``webmks``. The type
    ``webmks`` was added in Microversion ``2.8``, and the type
    ``spice-direct`` was added in Microversion ``2.99``.
  in: body
  required: true
  type: string
remote_console_url:
  description: |
    The URL is used to connect the console.
  in: body
  required: true
  type: string
removeFixedIp:
  description: |
    The action to remove a fixed ip address from a server.
  in: body
  required: true
  type: object
removeFloatingIp:
  description: |
    The action to remove or disassociate a floating IP address
    from the server.
  in: body
  required: true
  type: object
removeSecurityGroup:
  description: |
    The action to remove a security group from the server.
  in: body
  required: true
  type: object
removeTenantAccess:
  description: |
    The action.
  in: body
  required: true
  type: string
request_id_body:
  description: |
    The request id generated when execute the API of this action.
  in: body
  required: true
  type: string
rescue:
  description: |
    The action to rescue a server.
  in: body
  required: true
  type: object
rescue_image_ref:
  description: |
    The image reference to use to rescue your server instance. Specify the image reference
    by ID or full URL.  If you omit an image reference, default is the base image
    reference.
  in: body
  required: false
  type: string
reservation_id:
  description: |
    The reservation id for the server. This is an id that can
    be useful in tracking groups of servers created with multiple
    create, that will all have the same reservation_id.
  in: body
  required: true
  type: string
reserved:
  description: |
    The reserved quota value.
  in: body
  required: true
  type: integer
reserved_fixedip:
  description: |
    True if the fixed ip is reserved, otherwise False.
  in: body
  required: true
  type: boolean
  min_version: 2.4
resetNetwork:
  description: |
    The action.
  in: body
  required: true
  type: none
resize:
  description: |
    The action to resize a server.
  in: body
  required: true
  type: object
restore:
  description: |
    The action.
  in: body
  required: true
  type: none
resume:
  description: |
    The action to resume a suspended server.
  in: body
  required: true
  type: none
return_reservation_id:
  description: |
    Set to ``True`` to request that the response return a reservation ID instead of
    instance information. Default is ``False``.
  in: body
  required: false
  type: boolean
revertResize:
  description: |
    The action to revert a resize operation.
  in: body
  required: true
  type: none
rules:
  description: |
    The list of security group rules.
  in: body
  required: true
  type: array
running_vms:
  description: |
    The number of running VMs on this hypervisor.
  in: body
  required: true
  type: integer
  max_version: 2.87
running_vms_total:
  description: |
    The total number of running VMs on all hypervisors.
  in: body
  required: true
  type: integer
scheduler_hints:
  description: |
    The dictionary of hints sent to the scheduler during server
    creation time.
  in: body
  required: true
  type: object
  min_version: 2.100
secgroup_default_rule_id:
  description: |
    The security group default rule ID.
  in: body
  required: true
  type: string
secgroup_rule_cidr:
  description: |
    The CIDR for address range.
  in: body
  required: false
  type: string
secgroup_rule_id:
  description: |
    The security group rule ID.
  in: body
  required: true
  type: string
secgroup_rule_ip_range:
  description: |
    An IP range object. Includes the security group rule ``cidr``.
  in: body
  required: true
  type: object
secgroup_tenant_id_body:
  description: |
    The UUID of the tenant that owns this security group.
  in: body
  required: false
  type: string
security_group:
  description: |
    Specify the ``security_group`` action in the request body.
  in: body
  required: true
  type: string
security_group_default_rule:
  description: |
    A ``security_group_default_rule`` object.
  in: body
  required: true
  type: object
security_group_default_rules:
  description: |
    A list of the ``security_group_default_rule`` object.
  in: body
  required: true
  type: array
security_group_id_body:
  description: |
    The ID of the security group.
  in: body
  required: true
  type: string
security_group_rule:
  description: |
    A ``security_group_rule`` object.
  in: body
  required: true
  type: object
security_group_rules:
  description: |
    The number of allowed rules for each security group.
  in: body
  required: false
  type: integer
  max_version: 2.35
security_group_rules_quota:
  description: |
    The number of allowed rules for each security group.
  in: body
  required: true
  type: integer
  max_version: 2.35
security_group_rules_quota_class: &security_group_rules_quota_class
  description: |
    The number of allowed rules for each security group.
  in: body
  required: true
  type: integer
  max_version: 2.49
security_group_rules_quota_class_optional:
  <<: *security_group_rules_quota_class
  required: false
security_group_rules_quota_details:
  description: |
    The object of detailed security group rules quota, including in_use,
    limit and reserved number of security group rules.
  in: body
  required: true
  type: object
  max_version: 2.35
security_groups:
  description: |
    One or more security groups. Specify the name of the security group in the
    ``name`` attribute. If you omit this attribute, the API creates the server
    in the ``default`` security group. Requested security groups are not
    applied to pre-existing ports.
  in: body
  required: false
  type: array
security_groups_obj:
  description: |
    One or more security groups objects.
  in: body
  required: true
  type: array
security_groups_obj_optional:
  description: |
    One or more security groups objects.
  in: body
  required: false
  type: array
security_groups_obj_update_rebuild:
  description: |
    One or more security groups objects.
  in: body
  required: false
  type: array
  min_version: 2.75
security_groups_quota:
  description: |
    The number of allowed security groups for each tenant.
  in: body
  required: true
  type: integer
  max_version: 2.35
security_groups_quota_class: &security_groups_quota_class
  description: |
    The number of allowed security groups for the quota class.
  in: body
  required: true
  type: integer
  max_version: 2.49
security_groups_quota_class_optional:
  <<: *security_groups_quota_class
  required: false
security_groups_quota_details:
  description: |
    The object of detailed security groups, including in_use,
    limit and reserved number of security groups.
  in: body
  required: true
  type: object
  max_version: 2.35
security_groups_quota_optional:
  description: |
    The number of allowed security groups for each tenant.
  in: body
  required: false
  type: integer
  max_version: 2.35
server:
  description: |
    A ``server`` object.
  in: body
  required: true
  type: object
server_description:
  type: string
  in: body
  required: false
  min_version: 2.19
  description: |
    A free form description of the server. Limited to 255 characters
    in length. Before microversion 2.19 this was set to the server
    name.
server_description_resp:
  description: |
    The description of the server.
    Before microversion 2.19 this was set to the server name.
  in: body
  required: true
  type: string
  min_version: 2.19
server_group:
  description: |
    The server group object.
  in: body
  required: true
  type: object
server_group_id_body:
  description: |
    The UUID of the server group.
  in: body
  required: true
  type: string
server_group_members: &server_group_members
  description: |
    The number of allowed members for each server group.
  in: body
  required: true
  type: integer
server_group_members_quota_class:
  <<: *server_group_members
  min_version: 2.50
server_group_members_quota_details:
  description: |
    The object of detailed server group members, including in_use,
    limit and reserved number of server group members.
  in: body
  required: true
  type: object
server_group_members_quota_optional:
  description: |
    The number of allowed members for each server group.
  in: body
  required: false
  type: integer
server_groups: &server_groups
  description: |
    The number of allowed server groups for each tenant.
  in: body
  required: true
  type: integer
server_groups_2_71:
  description: |
    The UUIDs of the server groups to which the server belongs. Currently
    this can contain at most one entry.
  in: body
  required: true
  type: array
  min_version: 2.71
server_groups_list:
  description: |
    The list of existing server groups.
  in: body
  required: true
  type: array
server_groups_quota_class:
  <<: *server_groups
  description: |
    The number of allowed server groups for the quota class.
  min_version: 2.50
server_groups_quota_class_optional:
  <<: *server_groups
  description: |
    The number of allowed server groups for the quota class.
  required: false
server_groups_quota_details:
  description: |
    The object of detailed server groups, including in_use,
    limit and reserved number of server groups.
  in: body
  required: true
  type: object
server_groups_quota_optional:
  description: |
    The number of allowed server groups for each tenant.
  in: body
  required: false
  type: integer
# This is the host in a POST (create instance) request body.
server_host_create:
  description: |
    The name of the compute service host on which the server is to be created.
    The API will return 400 if no compute services are found with the given
    host name. By default, it can be specified by administrators only.
  in: body
  required: false
  type: string
  min_version: 2.74
server_hostname: &server_hostname
  in: body
  required: false
  type: string
  description: |
    The hostname of the instance reported in the metadata service.
    This parameter only appears in responses for administrators until
    microversion 2.90, after which it is shown for all users.

    .. note::

        This information is published via the metadata service and requires
        application such as ``cloud-init`` to propagate it through to the
        instance.
  min_version: 2.3
server_hostname_req:
  in: body
  required: false
  type: string
  description: |
    The hostname to configure for the instance in the metadata service.

    Starting with microversion 2.94, this can be a Fully Qualified Domain Name
    (FQDN) of up to 255 characters in length.

    .. note::

        This information is published via the metadata service and requires
        application such as ``cloud-init`` to propagate it through to the
        instance.
  min_version: 2.90
server_hostname_update_rebuild:
  <<: *server_hostname
  min_version: 2.75
# This is the hypervisor_hostname in a POST (create instance) request body.
server_hypervisor_hostname_create:
  description: |
    The hostname of the hypervisor on which the server is to be created.
    The API will return 400 if no hypervisors are found with the given
    hostname. By default, it can be specified by administrators only.
  in: body
  required: false
  type: string
  min_version: 2.74
server_id:
  description: |
    The UUID of the server.
  in: body
  required: true
  type: string
server_id_optional:
  description: |
    The UUID of the server.
  in: body
  required: false
  type: string
server_kernel_id:
  in: body
  required: false
  type: string
  description: |
    The UUID of the kernel image when using an AMI. Will be null if not.
    By default, it appears in the response for administrative users only.
  min_version: 2.3
server_kernel_id_update_rebuild:
  in: body
  required: false
  type: string
  description: |
    The UUID of the kernel image when using an AMI. Will be null if not.
    By default, it appears in the response for administrative users only.
  min_version: 2.75
server_launch_index:
  in: body
  required: false
  type: integer
  description: |
    When servers are launched via multiple create, this is the
    sequence in which the servers were launched.
    By default, it appears in the response for administrative users only.
  min_version: 2.3
server_launch_index_update_rebuild:
  in: body
  required: false
  type: integer
  description: |
    When servers are launched via multiple create, this is the
    sequence in which the servers were launched.
    By default, it appears in the response for administrative users only.
  min_version: 2.75
server_links:
  description: |
    Links pertaining to the server. See `API Guide / Links and
    References
    <https://docs.openstack.org/api-guide/compute/links_and_references.html>`_
    for more info.
  in: body
  type: array
  required: true
server_name:
  description: |
    The server name.
  in: body
  required: true
  type: string
server_name_optional:
  description: |
    The server name.
  in: body
  required: false
  type: string
server_ramdisk_id:
  in: body
  required: false
  type: string
  description: |
    The UUID of the ramdisk image when using an AMI. Will be null if not.
    By default, it appears in the response for administrative users only.
  min_version: 2.3
server_ramdisk_id_update_rebuild:
  in: body
  required: false
  type: string
  description: |
    The UUID of the ramdisk image when using an AMI. Will be null if not.
    By default, it appears in the response for administrative users only.
  min_version: 2.75
server_reservation_id:
  in: body
  required: false
  type: string
  description: |
    The reservation id for the server. This is an id that can
    be useful in tracking groups of servers created with multiple
    create, that will all have the same reservation_id.
    By default, it appears in the response for administrative users only.
  min_version: 2.3
server_reservation_id_update_rebuild:
  in: body
  required: false
  type: string
  description: |
    The reservation id for the server. This is an id that can
    be useful in tracking groups of servers created with multiple
    create, that will all have the same reservation_id.
    By default, it appears in the response for administrative users only.
  min_version: 2.75
server_root_device_name:
  in: body
  required: false
  type: string
  description: |
    The root device name for the instance
    By default, it appears in the response for administrative users only.
  min_version: 2.3
server_root_device_name_update_rebuild:
  in: body
  required: false
  type: string
  description: |
    The root device name for the instance
    By default, it appears in the response for administrative users only.
  min_version: 2.75
server_status:
  description: |
    The server status.
  in: body
  required: true
  type: string
server_tags_create:
  description: |
    A list of tags. Tags have the following restrictions:

    - Tag is a Unicode bytestring no longer than 60 characters.

    - Tag is a non-empty string.

    - '/' is not allowed to be in a tag name

    - Comma is not allowed to be in a tag name in order to simplify
      requests that specify lists of tags

    - All other characters are allowed to be in a tag name

    - Each server can have up to 50 tags.
  in: body
  required: false
  type: array
  min_version: 2.52
server_topology_nodes:
  description: |
    NUMA nodes information of a server.
  in: body
  required: true
  type: array
server_topology_nodes_cpu_pinning:
  description: |
    The mapping of server cores to host physical CPU. for example::

     cpu_pinning: { 0: 0, 1: 5}

    This means vcpu 0 is mapped to physical CPU 0, and vcpu 1 is mapped
    physical CPU 5.

    By default the ``cpu_pinning`` field is only visible to users with the
    administrative role. You can change the default behavior via the policy
    rule::

     compute:server:topology:host:index
  in: body
  required: false
  type: dict
server_topology_nodes_cpu_siblings:
  description: |
    A mapping of host cpus thread sibling. For example::

      siblings: [[0,1],[2,3]]

    This means vcpu 0 and vcpu 1 belong to same CPU core, vcpu 2, vcpu 3
    belong to another CPU core.

    By default the ``siblings`` field is only visible to users with the
    administrative role. You can change the default behavior via the policy
    rule::

      compute:server:topology:host:index
  in: body
  required: false
  type: list
server_topology_nodes_host_node:
  description: |
    The host NUMA node the virtual NUMA node is map to.

    By default the ``host_node`` field is only visible to users with the
    administrator role. You can change the default behavior via the policy
    rule::

     compute:server:topology:host:index
  in: body
  required: false
  type: integer
server_topology_nodes_memory_mb:
  description: |
    The amount of memory assigned to this NUMA node in MB.
  in: body
  required: false
  type: integer
server_topology_nodes_vcpu_set:
  description: |
    A list of IDs of the virtual CPU assigned to this NUMA node.
  in: body
  required: false
  type: list
server_topology_pagesize_kb:
  description: |
    The page size in KB of a server. This field is ``null`` if the
    page size information is not available.
  in: body
  required: true
  type: integer
server_trusted_image_certificates_create_req:
  description: |
    A list of trusted certificate IDs, which are used during image
    signature verification to verify the signing certificate. The list is
    restricted to a maximum of 50 IDs. This parameter is optional in server
    create requests if allowed by policy, and is not supported for
    volume-backed instances.
  in: body
  required: false
  type: array
  min_version: 2.63
server_trusted_image_certificates_rebuild_req:
  description: |
    A list of trusted certificate IDs, which are used during image
    signature verification to verify the signing certificate. The list is
    restricted to a maximum of 50 IDs. This parameter is optional in server
    rebuild requests if allowed by policy, and is not supported
    for volume-backed instances.

    If ``null`` is specified, the existing trusted certificate IDs are either
    unset or reset to the configured defaults.
  in: body
  required: false
  type: array
  min_version: 2.63
server_trusted_image_certificates_resp:
  description: |
    A list of trusted certificate IDs, that were used during image signature
    verification to verify the signing certificate. The list is restricted
    to a maximum of 50 IDs. The value is ``null`` if trusted certificate IDs
    are not set.
  in: body
  required: true
  type: array
  min_version: 2.63
server_usages:
  description: |
    A list of the server usage objects.
  in: body
  required: true
  type: array
server_usages_optional:
  description: |
    A list of the server usage objects.
  in: body
  required: false
  type: array
server_user_data:
  in: body
  required: false
  type: string
  description: |
    The user_data the instance was created with.
    By default, it appears in the response for administrative users only.
  min_version: 2.3
server_user_data_update:
  in: body
  required: false
  type: string
  description: |
    The user_data the instance was created with.
    By default, it appears in the response for administrative users only.
  min_version: 2.75
server_uuid:
  description: |
    The UUID of the server instance to which the API dispatches the event.  You must
    assign this instance to a host. Otherwise, this call does not dispatch the event
    to the instance.
  in: body
  required: true
  type: string
servers:
  description: |
    A list of ``server`` objects.
  in: body
  required: true
  type: array
servers_links:
  description: |
    Links to the next server. It is available when the number of servers exceeds
    ``limit`` parameter or ``[api]/max_limit`` in the configuration file.
    See `Paginated collections
    <https://docs.openstack.org/api-guide/compute/paginated_collections.html>`__
    for more info.
  in: body
  type: array
  required: false
servers_max_count:
  in: body
  required: false
  type: integer
  description: |
    The max number of servers to be created. Defaults to the value of ``min_count``.
servers_min_count:
  in: body
  required: false
  type: integer
  description: |
    The min number of servers to be created. Defaults to 1.
servers_multiple_create_name:
  in: body
  required: true
  type: string
  description: |
    A base name for creating unique names during multiple create.
service:
  description: |
    Object representing a compute service.
  in: body
  required: true
  type: object
service_disable_reason:
  description: |
    The disable reason of the service, ``null`` if the service is enabled or
    disabled without reason provided.
  in: body
  required: true
  type: string
service_id_body:
  description: |
    The id of the service.
  in: body
  required: true
  type: integer
service_id_body_2_52:
  description: |
    The id of the service.
  in: body
  required: true
  type: integer
  max_version: 2.52
service_id_body_2_53:
  description: |
    The id of the service as a uuid.
  in: body
  required: true
  type: string
  min_version: 2.53
service_id_body_2_53_no_version:
  description: |
    The id of the service as a uuid.
  in: body
  required: true
  type: string
service_state:
  description: |
    The state of the service. One of ``up`` or ``down``.
  in: body
  required: true
  type: string
service_status:
  description: |
    The status of the service. One of ``enabled`` or ``disabled``.
  in: body
  required: true
  type: string
# This is an optional input parameter to PUT /os-services/{service_id} added
# in microversion 2.53.
service_status_2_53_in:
  description: |
    The status of the service. One of ``enabled`` or ``disabled``.
  in: body
  required: false
  type: string
services:
  description: |
    A list of service objects.
  in: body
  required: true
  type: array
set_metadata:
  description: |
    The set_metadata object used to set metadata for host aggregate.
  in: body
  required: true
  type: object
share_body:
  description: |
    A dictionary representation of a share attachment containing the fields
    ``uuid``, ``serverId``, ``status``, ``tag`` and ``export_location``.
  in: body
  required: true
  type: object
share_export_location_body:
  description: |
    The export location used to attach the share to the underlying host.
  in: body
  required: false
  type: string
share_id_body:
  description: |
    The UUID of the attached share.
  in: body
  required: true
  type: string
share_status_body:
  description: |
    Status of the Share:

    - attaching: The share is being attached to the VM by the compute node.
    - detaching: The share is being detached from the VM by the compute node.
    - inactive: The share is attached but inactive because the VM is stopped.
    - active: The share is attached, and the VM is running.
    - error: The share is in an error state.
  in: body
  required: true
  type: string
share_tag_body:
  description: |
    The device tag to be used by users to mount the share within the instance,
    if not provided then the share UUID will be used automatically.
  in: body
  required: true
  type: string
share_uuid_body:
  description: |
    The UUID of the share attachment.
  in: body
  required: false
  type: string
shares_body:
  description: |
    The list of share attachments.
  in: body
  required: true
  type: array
shelve:
  description: |
    The action.
  in: body
  required: true
  type: none
shelveOffload:
  description: |
    The action.
  in: body
  required: true
  type: none
size:
  description: |
    The size of the volume, in gibibytes (GiB).
  in: body
  required: true
  type: integer
snapshot:
  description: |
    A partial representation of a snapshot that is used to create a snapshot.
  in: body
  required: true
  type: object
snapshot_description:
  description: |
    The snapshot description.
  in: body
  required: true
  type: string
snapshot_description_optional:
  description: |
    The snapshot description.
  in: body
  required: false
  type: string
snapshot_id:
  description: |
    The UUID for a snapshot.
  in: body
  required: true
  type: string
snapshot_id_optional:
  description: |
    The UUID for a snapshot.
  in: body
  required: false
  type: string
snapshot_id_resp_2_45:
  description: |
    The UUID for the resulting image snapshot.
  in: body
  required: true
  type: string
  min_version: 2.45
snapshot_name:
  description: |
    The snapshot name.
  in: body
  required: true
  type: string
snapshot_name_optional:
  description: |
    The snapshot name.
  in: body
  required: false
  type: string
snapshot_status:
  description: |
    The status of the snapshot.  Valid status values are:

    - ``available``
    - ``creating``
    - ``deleting``
    - ``error``
    - ``error_deleting``
  in: body
  required: true
  type: string
snapshots:
  description: |
    A list of snapshot objects.
  in: body
  required: true
  type: array
source_type:
  description: |
    The source type of the block device. Valid values are:

    * ``blank``: Depending on the ``destination_type`` and ``guest_format``,
      this will either be a blank persistent volume or an ephemeral (or swap)
      disk local to the compute host on which the server resides
    * ``image``: This is only valid with ``destination_type=volume``; creates
      an image-backed volume in the block storage service and attaches it to
      the server
    * ``snapshot``: This is only valid with ``destination_type=volume``;
      creates a volume backed by the given volume snapshot referenced via the
      ``block_device_mapping_v2.uuid`` parameter and attaches it to the server
    * ``volume``: This is only valid with ``destination_type=volume``; uses
      the existing persistent volume referenced via the
      ``block_device_mapping_v2.uuid`` parameter and attaches it to the server

    This parameter is required unless ``block_device_mapping_v2.no_device`` is
    specified.

    See `Block Device Mapping in Nova <https://docs.openstack.org/nova/latest/user/block-device-mapping.html>`_
    for more details on valid source and destination types.
  in: body
  required: false
  type: string
start_simple_tenant_usage_body:
  description: |
    The beginning time to calculate usage statistics on compute and
    storage resources. The date and time stamp format is as follows:

    ::

       CCYY-MM-DDThh:mm:ss.NNNNNN

    For example, ``2015-08-27T09:49:58.123456``.
  in: body
  required: true
  type: string
start_time:
  description: |
    The date and time when the action was started. The date and time
    stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_

    ::

      CCYY-MM-DDThh:mm:ss±hh:mm

    For example, ``2015-08-27T09:49:58-05:00``. The ``±hh:mm``
    value, if included, is the time zone as an offset from UTC.  In
    the previous example, the offset value is ``-05:00``.
  in: body
  required: true
  type: string
started_at:
  description: |
    The date and time when the server was launched.

    The date and time stamp format is as follows:

    ::

      CCYY-MM-DDThh:mm:ss.NNNNNN

    For example, ``2015-08-27T09:49:58.123456``.
  in: body
  required: true
  type: string
started_at_optional:
  description: |
    The date and time when the server was launched.

    The date and time stamp format is as follows:

    ::

      CCYY-MM-DDThh:mm:ss.NNNNNN

    For example, ``2015-08-27T09:49:58.123456``.
  in: body
  required: false
  type: string
stop_simple_tenant_usage:
  description: |
    The ending time to calculate usage statistics on compute and
    storage resources. The date and time stamp format is as follows:

    ::

       CCYY-MM-DDThh:mm:ss.NNNNNN

    For example, ``2015-08-27T09:49:58.123456``.
  in: body
  required: true
  type: string
subnet_id:
  description: |
    The UUID of the subnet.
  in: body
  required: true
  type: string
suspend:
  description: |
    The action to suspend a server.
  in: body
  required: true
  type: none
tags:
  description: |
    A list of tags. The maximum count of tags in this list is 50.
  in: body
  required: true
  type: array
  min_version: 2.26
tags_no_min:
  description: |
    A list of tags. The maximum count of tags in this list is 50.
  in: body
  required: true
  type: array
tenant_id_body:
  description: |
    The UUID of the tenant in a multi-tenancy cloud.
  in: body
  required: true
  type: string
tenant_id_optional:
  description: |
    The UUID of the tenant in a multi-tenancy cloud.
  in: body
  required: false
  type: string
tenant_usage:
  description: |
    The tenant usage object.
  in: body
  required: true
  type: object
tenant_usages:
  description: |
    A list of the tenant usage objects.
  in: body
  required: true
  type: array
tls_port_number:
  description: |
    The port number of a port requiring a TLS connection.
  in: body
  required: false
  type: integer
to_port:
  description: |
    The port at end of range.
  in: body
  required: true
  type: integer
total_cores_used:
  description: |
    The number of used server cores in each tenant.
    If ``reserved`` query parameter is specified and it is not 0,
    the number of reserved server cores are also included.
  in: body
  required: true
  type: integer
total_errors:
  description: |
    The total number of instance audit task errors.
  in: body
  required: true
  type: integer
total_floatingips_used:
  description: |
    The number of used floating IP addresses in each tenant.
    If ``reserved`` query parameter is specified and it is not 0,
    the number of reserved floating IP addresses are also included.
  in: body
  required: true
  type: integer
  max_version: 2.35
total_hours:
  description: |
    The total duration that servers exist (in hours).
  in: body
  required: true
  type: float
total_instances:
  description: |
    The total number of VM instances in the period.
  in: body
  required: true
  type: integer
total_instances_used:
  description: |
    The number of servers in each tenant.
    If ``reserved`` query parameter is specified and it is not 0,
    the number of reserved servers are also included.
  in: body
  required: true
  type: integer
total_local_gb_usage:
  description: |
    Multiplying the server disk size (in GiB) by hours the server exists,
    and then adding that all together for each server.
  in: body
  required: true
  type: float
total_memory_mb_usage:
  description: |
    Multiplying the server memory size (in MiB) by hours the server exists,
    and then adding that all together for each server.
  in: body
  required: true
  type: float
total_ram_used:
  description: |
    The amount of used server RAM in each tenant.
    If ``reserved`` query parameter is specified and it is not 0,
    the amount of reserved server RAM is also included.
  in: body
  required: true
  type: integer
total_security_groups_used:
  description: |
    The number of used security groups in each tenant.
    If ``reserved`` query parameter is specified and it is not 0,
    the number of reserved security groups are also included.
  in: body
  required: true
  type: integer
  max_version: 2.35
total_server_groups_used:
  description: |
    The number of used server groups in each tenant.
    If ``reserved`` query parameter is specified and it is not 0,
    the number of reserved server groups are also included.
  in: body
  required: true
  type: integer
total_vcpus_usage:
  description: |
    Multiplying the number of virtual CPUs of the server by hours the server exists,
    and then adding that all together for each server.
  in: body
  required: true
  type: float
trigger_crash_dump:
  in: body
  required: true
  type: none
  description: |
    Specifies the trigger crash dump action should be run
type-os-assisted-volume-snapshot:
  description: |
    The snapshot type. A valid value is ``qcow2``.
  in: body
  required: true
  type: string
unlock:
  description: |
    The action to unlock a locked server.
  in: body
  required: true
  type: none
unpause:
  description: |
    The action to unpause a paused server.
  in: body
  required: true
  type: none
unrescue:
  description: |
    The action to unrescue a server in rescue mode.
  in: body
  required: true
  type: none
unshelve:
  description: |
    The action.
  in: body
  required: true
  type: none
updated:
  description: |
    The date and time when the resource was updated. The date and time
    stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_

    ::

      CCYY-MM-DDThh:mm:ss±hh:mm

    For example, ``2015-08-27T09:49:58-05:00``. The ``±hh:mm``
    value, if included, is the time zone as an offset from UTC.  In
    the previous example, the offset value is ``-05:00``.
  in: body
  required: true
  type: string
updated_consider_null:
  description: |
    The date and time when the resource was updated, if the resource has
    not been updated, this field will show as ``null``. The date and time
    stamp format is `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_

    ::

      CCYY-MM-DDThh:mm:ss±hh:mm

    For example, ``2015-08-27T09:49:58-05:00``. The ``±hh:mm``
    value, if included, is the time zone as an offset from UTC.  In
    the previous example, the offset value is ``-05:00``.
  in: body
  required: true
  type: string
updated_instance_action:
  description: |
    The date and time when the instance action or the action event of
    instance action was updated. The date and time stamp format is
    `ISO 8601 <https://en.wikipedia.org/wiki/ISO_8601>`_

    ::

      CCYY-MM-DDThh:mm:ss±hh:mm

    For example, ``2015-08-27T09:49:58-05:00``. The ``±hh:mm``
    value, if included, is the time zone as an offset from UTC.  In
    the previous example, the offset value is ``-05:00``.
  in: body
  required: true
  type: string
  min_version: 2.58
updated_version:
  description: |
    This is a fixed string. It is ``2011-01-21T11:33:21Z`` in version 2.0,
    ``2013-07-23T11:33:21Z`` in version 2.1.

    .. note::
      It is vestigial and provides no useful information.
      It will be deprecated and removed in the future.
  in: body
  required: true
  type: string
uptime:
  description: |
    The total uptime of the hypervisor and information about average
    load.
  in: body
  required: true
  type: string
uptime_diagnostics:
  description: |
    The amount of time in seconds that the VM has been running.
  in: body
  required: true
  type: integer
  min_version: 2.48
uptime_simple_tenant_usage:
  description: |
    The uptime of the server.
  in: body
  required: true
  type: integer
uptime_simple_tenant_usage_optional:
  description: |
    The uptime of the server.
  in: body
  required: false
  type: integer
url:
  description: |
    The URL associated with the agent.
  in: body
  required: true
  type: string
usage_links:
  description: |
    Links pertaining to usage. See `API Guide / Links and
    References
    <https://docs.openstack.org/api-guide/compute/links_and_references.html>`_
    for more info.
  in: body
  type: array
  required: false
  min_version: 2.40
user_data:
  description: |
    Configuration information or scripts to use upon launch.
    Must be Base64 encoded. Restricted to 65535 bytes.

    .. note::

      The ``null`` value allowed in Nova legacy v2 API, but due to the strict
      input validation, it isn't allowed in Nova v2.1 API.
  in: body
  required: false
  type: string
user_data_rebuild_req:
  description: |
    Configuration information or scripts to use upon rebuild.
    Must be Base64 encoded. Restricted to 65535 bytes.
    If ``null`` is specified, the existing user_data is unset.
  in: body
  required: false
  type: string
  min_version: 2.57
user_data_rebuild_resp:
  in: body
  required: true
  type: string
  description: |
    The current user_data for the instance.
  min_version: 2.57
user_id:
  description: |
    The user ID of the user who owns the server.
  in: body
  required: true
  type: string
user_id_migration_2_80:
  description: |
    The ID of the user which initiated the server migration. The value
    may be ``null`` for older migration records.
  in: body
  required: true
  type: string
  min_version: 2.80
user_id_server_action:
  description: |
    The ID of the user which initiated the server action.
  in: body
  required: true
  type: string
user_id_server_group:
  description: |
    The user ID who owns the server group.
  min_version: 2.13
  in: body
  required: true
  type: string
vcpus:
  description: |
    The number of virtual CPUs that the server uses.
  in: body
  required: true
  type: integer
vcpus_optional:
  description: |
    The number of virtual CPUs that the server uses.
  in: body
  required: false
  type: integer
version:
  description: |
    The version.
  in: body
  required: true
  type: string
version_id:
  type: string
  in: body
  required: true
  description: >
    A common name for the version in question. Informative only, it
    has no real semantic meaning.
version_ip:
  description: |
    The IP version of the address associated with server.
  in: body
  required: true
  type: integer
version_max:
  type: string
  in: body
  required: true
  description: >
    If this version of the API supports microversions, the maximum
    microversion that is supported. This will be the empty string if
    microversions are not supported.
version_min:
  type: string
  in: body
  required: true
  description: >
    If this version of the API supports microversions, the minimum
    microversion that is supported. This will be the empty string if
    microversions are not supported.
version_status:
  type: string
  in: body
  required: true
  description: |
    The status of this API version. This can be one of:

    - ``CURRENT``: this is the preferred version of the API to use
    - ``SUPPORTED``: this is an older, but still supported version of the API
    - ``DEPRECATED``: a deprecated version of the API that is slated for removal
versions:
  type: array
  in: body
  required: true
  description: >
    A list of version objects that describe the API versions available.
virtual_interface:
  description: |
    Virtual interface for the floating ip address.
  in: body
  required: true
  type: string
virtual_interface_id:
  description: |
    The UUID of the virtual interface.
  in: body
  required: true
  type: string
virtual_interface_id_optional:
  description: |
    Virtual interface for the floating ip address
  in: body
  required: false
  type: string
virtual_interfaces:
  description: |
    An array of virtual interfaces.
  in: body
  required: true
  type: array
vm_state_diagnostics:
  description: |
    A string enum denoting the current state of the VM. Possible values are:

    - ``pending``
    - ``running``
    - ``paused``
    - ``shutdown``
    - ``crashed``
    - ``suspended``
  in: body
  required: true
  type: string
  min_version: 2.48
vm_state_optional:
  description: |
    The VM state.
  in: body
  required: false
  type: string
volume:
  description: |
    The ``volume`` object.
  in: body
  required: true
  type: object
volume_attachment_id_resp:
  description: |
    The volume ID of the attachment.
  in: body
  required: true
  type: string
  max_version: 2.88
volume_id:
  description: |
    The source volume ID.
  in: body
  required: true
  type: string
volume_id_resp:
  description: |
    The UUID of the volume.
  in: body
  required: true
  type: string
volume_size:
  description: |
    The size of the volume (in GiB).
    This is integer value from range 1 to 2147483647
    which can be requested as integer and string.
    This parameter must be specified in the following cases:

    - An image to volume case

      * ``block_device_mapping_v2.source_type`` is ``image``
      * ``block_device_mapping_v2.destination_type`` is ``volume``

    - A blank to volume case

      * ``block_device_mapping_v2.source_type`` is ``blank``
      * ``block_device_mapping_v2.destination_type`` is ``volume``
  in: body
  required: false
  type: integer
volume_status:
  description: |
    The status of the volume.
  in: body
  required: true
  type: string
volume_type:
  description: |
    The name or unique identifier for a volume type.
  in: body
  required: true
  type: string
volume_type_optional:
  description: |
    The unique identifier for a volume type.
  in: body
  required: false
  type: string
# This is the volumeAttachment in a response body.
volumeAttachment:
  description: |
    A dictionary representation of a volume attachment containing the fields
    ``device``, ``id``, ``serverId`` and ``volumeId``.
  in: body
  required: true
  type: object
# This is the volumeAttachment in a POST (attach volume) request body.
volumeAttachment_post:
  description: |
    A dictionary representation of a volume attachment containing the fields
    ``device`` and ``volumeId``.
  in: body
  required: true
  type: object
# This is the volumeAttachment in a PUT (swap volume) request body.
volumeAttachment_put:
  description: |
    A dictionary representation of a volume attachment containing the field
    ``volumeId`` which is the UUID of the replacement volume, and other fields
    to update in the attachment.
  in: body
  required: true
  type: object
volumeAttachments:
  description: |
    The list of volume attachments.
  in: body
  required: true
  type: array
volumeId:
  description: |
    The UUID of the volume to attach.
  in: body
  required: true
  type: string
volumeId_resp:
  description: |
    The UUID of the attached volume.
  in: body
  required: true
  type: string
volumeId_swap:
  description: |
    The UUID of the volume to attach instead of the attached volume.
  in: body
  required: true
  type: string
volumes:
  description: |
    The list of ``volume`` objects.
  in: body
  required: true
  type: array
vpn_public_ip:
  description: |
    The VPN IP address.
  in: body
  required: true
  type: string
vpn_public_ip_resp:
  description: |
    The VPN public IP address.
  in: body
  required: false
  type: string
vpn_public_port:
  description: |
    The VPN port.
  in: body
  required: true
  type: string
vpn_public_port_resp:
  description: |
    The VPN public port.
  in: body
  required: false
  type: string
vpn_state:
  description: |
    The VPN state.
  in: body
  required: false
  type: string
